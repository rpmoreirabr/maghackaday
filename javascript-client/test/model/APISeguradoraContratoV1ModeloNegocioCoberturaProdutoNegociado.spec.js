/*
 * API.Seguradora
 * Serviços de Negócios expostos através de RESTful services, para integrações com parceiros e agilidade no desenvolvimento interno de softwares da companhia.
 *
 * OpenAPI spec version: v1
 * Contact: integracaosistemas@mongeralaegon.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apiseguradora);
  }
}(this, function(expect, Apiseguradora) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado', function() {
      beforeEach(function() {
        instance = new Apiseguradora.APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado();
      });

      it('should create an instance of APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado', function() {
        // TODO: update the code to test APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado
        expect(instance).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado);
      });

      it('should have the property modeloRelacionamentoItemProdutoId (base name: "modeloRelacionamentoItemProdutoId")', function() {
        // TODO: update the code to test the property modeloRelacionamentoItemProdutoId
        expect(instance).to.have.property('modeloRelacionamentoItemProdutoId');
        // expect(instance.modeloRelacionamentoItemProdutoId).to.be(expectedValueLiteral);
      });

      it('should have the property modeloRelacionamentoProdutoId (base name: "modeloRelacionamentoProdutoId")', function() {
        // TODO: update the code to test the property modeloRelacionamentoProdutoId
        expect(instance).to.have.property('modeloRelacionamentoProdutoId');
        // expect(instance.modeloRelacionamentoProdutoId).to.be(expectedValueLiteral);
      });

      it('should have the property produtoId (base name: "produtoId")', function() {
        // TODO: update the code to test the property produtoId
        expect(instance).to.have.property('produtoId');
        // expect(instance.produtoId).to.be(expectedValueLiteral);
      });

      it('should have the property itemProdutoId (base name: "itemProdutoId")', function() {
        // TODO: update the code to test the property itemProdutoId
        expect(instance).to.have.property('itemProdutoId');
        // expect(instance.itemProdutoId).to.be(expectedValueLiteral);
      });

      it('should have the property sigla (base name: "sigla")', function() {
        // TODO: update the code to test the property sigla
        expect(instance).to.have.property('sigla');
        // expect(instance.sigla).to.be(expectedValueLiteral);
      });

      it('should have the property nome (base name: "nome")', function() {
        // TODO: update the code to test the property nome
        expect(instance).to.have.property('nome');
        // expect(instance.nome).to.be(expectedValueLiteral);
      });

      it('should have the property numeroProcessoSusep (base name: "numeroProcessoSusep")', function() {
        // TODO: update the code to test the property numeroProcessoSusep
        expect(instance).to.have.property('numeroProcessoSusep');
        // expect(instance.numeroProcessoSusep).to.be(expectedValueLiteral);
      });

      it('should have the property nomeFantasia (base name: "nomeFantasia")', function() {
        // TODO: update the code to test the property nomeFantasia
        expect(instance).to.have.property('nomeFantasia');
        // expect(instance.nomeFantasia).to.be(expectedValueLiteral);
      });

      it('should have the property tipo (base name: "tipo")', function() {
        // TODO: update the code to test the property tipo
        expect(instance).to.have.property('tipo');
        // expect(instance.tipo).to.be(expectedValueLiteral);
      });

      it('should have the property grupoApolice (base name: "grupoApolice")', function() {
        // TODO: update the code to test the property grupoApolice
        expect(instance).to.have.property('grupoApolice');
        // expect(instance.grupoApolice).to.be(expectedValueLiteral);
      });

      it('should have the property valorMaximoCapital (base name: "valorMaximoCapital")', function() {
        // TODO: update the code to test the property valorMaximoCapital
        expect(instance).to.have.property('valorMaximoCapital');
        // expect(instance.valorMaximoCapital).to.be(expectedValueLiteral);
      });

      it('should have the property tipoRelacaoSegurado (base name: "tipoRelacaoSegurado")', function() {
        // TODO: update the code to test the property tipoRelacaoSegurado
        expect(instance).to.have.property('tipoRelacaoSegurado');
        // expect(instance.tipoRelacaoSegurado).to.be(expectedValueLiteral);
      });

      it('should have the property codigoPlanoSysPrev (base name: "codigoPlanoSysPrev")', function() {
        // TODO: update the code to test the property codigoPlanoSysPrev
        expect(instance).to.have.property('codigoPlanoSysPrev');
        // expect(instance.codigoPlanoSysPrev).to.be(expectedValueLiteral);
      });

      it('should have the property codigoBeneficioSysPrev (base name: "codigoBeneficioSysPrev")', function() {
        // TODO: update the code to test the property codigoBeneficioSysPrev
        expect(instance).to.have.property('codigoBeneficioSysPrev');
        // expect(instance.codigoBeneficioSysPrev).to.be(expectedValueLiteral);
      });

      it('should have the property idNegociacaoSysPrev (base name: "idNegociacaoSysPrev")', function() {
        // TODO: update the code to test the property idNegociacaoSysPrev
        expect(instance).to.have.property('idNegociacaoSysPrev');
        // expect(instance.idNegociacaoSysPrev).to.be(expectedValueLiteral);
      });

      it('should have the property utilizaClasseDeRiscoNaContratacao (base name: "utilizaClasseDeRiscoNaContratacao")', function() {
        // TODO: update the code to test the property utilizaClasseDeRiscoNaContratacao
        expect(instance).to.have.property('utilizaClasseDeRiscoNaContratacao');
        // expect(instance.utilizaClasseDeRiscoNaContratacao).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiariosPossiveis (base name: "beneficiariosPossiveis")', function() {
        // TODO: update the code to test the property beneficiariosPossiveis
        expect(instance).to.have.property('beneficiariosPossiveis');
        // expect(instance.beneficiariosPossiveis).to.be(expectedValueLiteral);
      });

      it('should have the property prazoDeCobertura (base name: "prazoDeCobertura")', function() {
        // TODO: update the code to test the property prazoDeCobertura
        expect(instance).to.have.property('prazoDeCobertura');
        // expect(instance.prazoDeCobertura).to.be(expectedValueLiteral);
      });

      it('should have the property dependencias (base name: "dependencias")', function() {
        // TODO: update the code to test the property dependencias
        expect(instance).to.have.property('dependencias');
        // expect(instance.dependencias).to.be(expectedValueLiteral);
      });

      it('should have the property formasContratacao (base name: "formasContratacao")', function() {
        // TODO: update the code to test the property formasContratacao
        expect(instance).to.have.property('formasContratacao');
        // expect(instance.formasContratacao).to.be(expectedValueLiteral);
      });

      it('should have the property possuiIof (base name: "possuiIof")', function() {
        // TODO: update the code to test the property possuiIof
        expect(instance).to.have.property('possuiIof');
        // expect(instance.possuiIof).to.be(expectedValueLiteral);
      });

      it('should have the property indiceContribuicaoId (base name: "indiceContribuicaoId")', function() {
        // TODO: update the code to test the property indiceContribuicaoId
        expect(instance).to.have.property('indiceContribuicaoId');
        // expect(instance.indiceContribuicaoId).to.be(expectedValueLiteral);
      });

      it('should have the property indiceBeneficioId (base name: "indiceBeneficioId")', function() {
        // TODO: update the code to test the property indiceBeneficioId
        expect(instance).to.have.property('indiceBeneficioId');
        // expect(instance.indiceBeneficioId).to.be(expectedValueLiteral);
      });

      it('should have the property rendas (base name: "rendas")', function() {
        // TODO: update the code to test the property rendas
        expect(instance).to.have.property('rendas');
        // expect(instance.rendas).to.be(expectedValueLiteral);
      });

      it('should have the property codigoServicoPrestadora (base name: "codigoServicoPrestadora")', function() {
        // TODO: update the code to test the property codigoServicoPrestadora
        expect(instance).to.have.property('codigoServicoPrestadora');
        // expect(instance.codigoServicoPrestadora).to.be(expectedValueLiteral);
      });

      it('should have the property tipoServico (base name: "tipoServico")', function() {
        // TODO: update the code to test the property tipoServico
        expect(instance).to.have.property('tipoServico');
        // expect(instance.tipoServico).to.be(expectedValueLiteral);
      });

      it('should have the property nomeServico (base name: "nomeServico")', function() {
        // TODO: update the code to test the property nomeServico
        expect(instance).to.have.property('nomeServico');
        // expect(instance.nomeServico).to.be(expectedValueLiteral);
      });

      it('should have the property versao (base name: "versao")', function() {
        // TODO: update the code to test the property versao
        expect(instance).to.have.property('versao');
        // expect(instance.versao).to.be(expectedValueLiteral);
      });

      it('should have the property valoresRepassadoAoCliente (base name: "valoresRepassadoAoCliente")', function() {
        // TODO: update the code to test the property valoresRepassadoAoCliente
        expect(instance).to.have.property('valoresRepassadoAoCliente');
        // expect(instance.valoresRepassadoAoCliente).to.be(expectedValueLiteral);
      });

      it('should have the property fundos (base name: "fundos")', function() {
        // TODO: update the code to test the property fundos
        expect(instance).to.have.property('fundos');
        // expect(instance.fundos).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoContribuicaoMensal (base name: "valorMinimoContribuicaoMensal")', function() {
        // TODO: update the code to test the property valorMinimoContribuicaoMensal
        expect(instance).to.have.property('valorMinimoContribuicaoMensal');
        // expect(instance.valorMinimoContribuicaoMensal).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoContribuicaoMensalComAporteUnico (base name: "valorMinimoContribuicaoMensalComAporteUnico")', function() {
        // TODO: update the code to test the property valorMinimoContribuicaoMensalComAporteUnico
        expect(instance).to.have.property('valorMinimoContribuicaoMensalComAporteUnico');
        // expect(instance.valorMinimoContribuicaoMensalComAporteUnico).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoPortabilidadeEntrada (base name: "valorMinimoPortabilidadeEntrada")', function() {
        // TODO: update the code to test the property valorMinimoPortabilidadeEntrada
        expect(instance).to.have.property('valorMinimoPortabilidadeEntrada');
        // expect(instance.valorMinimoPortabilidadeEntrada).to.be(expectedValueLiteral);
      });

      it('should have the property valorMaximoPortabilidadeEntrada (base name: "valorMaximoPortabilidadeEntrada")', function() {
        // TODO: update the code to test the property valorMaximoPortabilidadeEntrada
        expect(instance).to.have.property('valorMaximoPortabilidadeEntrada');
        // expect(instance.valorMaximoPortabilidadeEntrada).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoPortabilidadeSaida (base name: "valorMinimoPortabilidadeSaida")', function() {
        // TODO: update the code to test the property valorMinimoPortabilidadeSaida
        expect(instance).to.have.property('valorMinimoPortabilidadeSaida');
        // expect(instance.valorMinimoPortabilidadeSaida).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoAporte (base name: "valorMinimoAporte")', function() {
        // TODO: update the code to test the property valorMinimoAporte
        expect(instance).to.have.property('valorMinimoAporte');
        // expect(instance.valorMinimoAporte).to.be(expectedValueLiteral);
      });

      it('should have the property valorMaximoAporte (base name: "valorMaximoAporte")', function() {
        // TODO: update the code to test the property valorMaximoAporte
        expect(instance).to.have.property('valorMaximoAporte');
        // expect(instance.valorMaximoAporte).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoAporteUnico (base name: "valorMinimoAporteUnico")', function() {
        // TODO: update the code to test the property valorMinimoAporteUnico
        expect(instance).to.have.property('valorMinimoAporteUnico');
        // expect(instance.valorMinimoAporteUnico).to.be(expectedValueLiteral);
      });

      it('should have the property valorMaximoAporteUnico (base name: "valorMaximoAporteUnico")', function() {
        // TODO: update the code to test the property valorMaximoAporteUnico
        expect(instance).to.have.property('valorMaximoAporteUnico');
        // expect(instance.valorMaximoAporteUnico).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoSaldo (base name: "valorMinimoSaldo")', function() {
        // TODO: update the code to test the property valorMinimoSaldo
        expect(instance).to.have.property('valorMinimoSaldo');
        // expect(instance.valorMinimoSaldo).to.be(expectedValueLiteral);
      });

      it('should have the property valorMaximoSaldo (base name: "valorMaximoSaldo")', function() {
        // TODO: update the code to test the property valorMaximoSaldo
        expect(instance).to.have.property('valorMaximoSaldo');
        // expect(instance.valorMaximoSaldo).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoResgate (base name: "valorMinimoResgate")', function() {
        // TODO: update the code to test the property valorMinimoResgate
        expect(instance).to.have.property('valorMinimoResgate');
        // expect(instance.valorMinimoResgate).to.be(expectedValueLiteral);
      });

      it('should have the property quantidadeMinimaContribuicao (base name: "quantidadeMinimaContribuicao")', function() {
        // TODO: update the code to test the property quantidadeMinimaContribuicao
        expect(instance).to.have.property('quantidadeMinimaContribuicao');
        // expect(instance.quantidadeMinimaContribuicao).to.be(expectedValueLiteral);
      });

      it('should have the property intervaloEntreAportesMeses (base name: "intervaloEntreAportesMeses")', function() {
        // TODO: update the code to test the property intervaloEntreAportesMeses
        expect(instance).to.have.property('intervaloEntreAportesMeses');
        // expect(instance.intervaloEntreAportesMeses).to.be(expectedValueLiteral);
      });

      it('should have the property limitePrazoDiferimentoAnos (base name: "limitePrazoDiferimentoAnos")', function() {
        // TODO: update the code to test the property limitePrazoDiferimentoAnos
        expect(instance).to.have.property('limitePrazoDiferimentoAnos');
        // expect(instance.limitePrazoDiferimentoAnos).to.be(expectedValueLiteral);
      });

      it('should have the property idadeMinima (base name: "idadeMinima")', function() {
        // TODO: update the code to test the property idadeMinima
        expect(instance).to.have.property('idadeMinima');
        // expect(instance.idadeMinima).to.be(expectedValueLiteral);
      });

      it('should have the property idadeMaxima (base name: "idadeMaxima")', function() {
        // TODO: update the code to test the property idadeMaxima
        expect(instance).to.have.property('idadeMaxima');
        // expect(instance.idadeMaxima).to.be(expectedValueLiteral);
      });

      it('should have the property prazoMinimoDiferimento (base name: "prazoMinimoDiferimento")', function() {
        // TODO: update the code to test the property prazoMinimoDiferimento
        expect(instance).to.have.property('prazoMinimoDiferimento');
        // expect(instance.prazoMinimoDiferimento).to.be(expectedValueLiteral);
      });

      it('should have the property prazoMaximoDiferimento (base name: "prazoMaximoDiferimento")', function() {
        // TODO: update the code to test the property prazoMaximoDiferimento
        expect(instance).to.have.property('prazoMaximoDiferimento');
        // expect(instance.prazoMaximoDiferimento).to.be(expectedValueLiteral);
      });

      it('should have the property idadeLimiteAposentadoria (base name: "idadeLimiteAposentadoria")', function() {
        // TODO: update the code to test the property idadeLimiteAposentadoria
        expect(instance).to.have.property('idadeLimiteAposentadoria');
        // expect(instance.idadeLimiteAposentadoria).to.be(expectedValueLiteral);
      });

      it('should have the property coberturaId (base name: "coberturaId")', function() {
        // TODO: update the code to test the property coberturaId
        expect(instance).to.have.property('coberturaId');
        // expect(instance.coberturaId).to.be(expectedValueLiteral);
      });

      it('should have the property classesDeRisco (base name: "classesDeRisco")', function() {
        // TODO: update the code to test the property classesDeRisco
        expect(instance).to.have.property('classesDeRisco');
        // expect(instance.classesDeRisco).to.be(expectedValueLiteral);
      });

      it('should have the property possuiDependenciaDeImplantacao (base name: "possuiDependenciaDeImplantacao")', function() {
        // TODO: update the code to test the property possuiDependenciaDeImplantacao
        expect(instance).to.have.property('possuiDependenciaDeImplantacao');
        // expect(instance.possuiDependenciaDeImplantacao).to.be(expectedValueLiteral);
      });

      it('should have the property possuiDependenciaDeCancelamento (base name: "possuiDependenciaDeCancelamento")', function() {
        // TODO: update the code to test the property possuiDependenciaDeCancelamento
        expect(instance).to.have.property('possuiDependenciaDeCancelamento');
        // expect(instance.possuiDependenciaDeCancelamento).to.be(expectedValueLiteral);
      });

      it('should have the property ehServico (base name: "ehServico")', function() {
        // TODO: update the code to test the property ehServico
        expect(instance).to.have.property('ehServico');
        // expect(instance.ehServico).to.be(expectedValueLiteral);
      });

      it('should have the property ehSobrevivencia (base name: "ehSobrevivencia")', function() {
        // TODO: update the code to test the property ehSobrevivencia
        expect(instance).to.have.property('ehSobrevivencia');
        // expect(instance.ehSobrevivencia).to.be(expectedValueLiteral);
      });

      it('should have the property ehAposentadoria (base name: "ehAposentadoria")', function() {
        // TODO: update the code to test the property ehAposentadoria
        expect(instance).to.have.property('ehAposentadoria');
        // expect(instance.ehAposentadoria).to.be(expectedValueLiteral);
      });

      it('should have the property ehFundoAcumulacao (base name: "ehFundoAcumulacao")', function() {
        // TODO: update the code to test the property ehFundoAcumulacao
        expect(instance).to.have.property('ehFundoAcumulacao');
        // expect(instance.ehFundoAcumulacao).to.be(expectedValueLiteral);
      });

      it('should have the property profissoesRecusadasIds (base name: "profissoesRecusadasIds")', function() {
        // TODO: update the code to test the property profissoesRecusadasIds
        expect(instance).to.have.property('profissoesRecusadasIds');
        // expect(instance.profissoesRecusadasIds).to.be(expectedValueLiteral);
      });

      it('should have the property segmentoNegocio (base name: "segmentoNegocio")', function() {
        // TODO: update the code to test the property segmentoNegocio
        expect(instance).to.have.property('segmentoNegocio');
        // expect(instance.segmentoNegocio).to.be(expectedValueLiteral);
      });

      it('should have the property ehRisco (base name: "ehRisco")', function() {
        // TODO: update the code to test the property ehRisco
        expect(instance).to.have.property('ehRisco');
        // expect(instance.ehRisco).to.be(expectedValueLiteral);
      });

      it('should have the property dataInicioContratoServico (base name: "dataInicioContratoServico")', function() {
        // TODO: update the code to test the property dataInicioContratoServico
        expect(instance).to.have.property('dataInicioContratoServico');
        // expect(instance.dataInicioContratoServico).to.be(expectedValueLiteral);
      });

      it('should have the property dataFimContratoServico (base name: "dataFimContratoServico")', function() {
        // TODO: update the code to test the property dataFimContratoServico
        expect(instance).to.have.property('dataFimContratoServico');
        // expect(instance.dataFimContratoServico).to.be(expectedValueLiteral);
      });

      it('should have the property prestadorServicoPessoaId (base name: "prestadorServico_PessoaId")', function() {
        // TODO: update the code to test the property prestadorServicoPessoaId
        expect(instance).to.have.property('prestadorServicoPessoaId');
        // expect(instance.prestadorServicoPessoaId).to.be(expectedValueLiteral);
      });

      it('should have the property nomeClasseRiscoPadrao (base name: "nomeClasseRiscoPadrao")', function() {
        // TODO: update the code to test the property nomeClasseRiscoPadrao
        expect(instance).to.have.property('nomeClasseRiscoPadrao');
        // expect(instance.nomeClasseRiscoPadrao).to.be(expectedValueLiteral);
      });

      it('should have the property classeDeRiscoPadraoParaContratacao (base name: "classeDeRiscoPadraoParaContratacao")', function() {
        // TODO: update the code to test the property classeDeRiscoPadraoParaContratacao
        expect(instance).to.have.property('classeDeRiscoPadraoParaContratacao');
        // expect(instance.classeDeRiscoPadraoParaContratacao).to.be(expectedValueLiteral);
      });

      it('should have the property tipoContaCorporateId (base name: "tipoContaCorporateId")', function() {
        // TODO: update the code to test the property tipoContaCorporateId
        expect(instance).to.have.property('tipoContaCorporateId');
        // expect(instance.tipoContaCorporateId).to.be(expectedValueLiteral);
      });

      it('should have the property numeroApoliceVidaEmGrupoAngariadoIndividual (base name: "numeroApoliceVidaEmGrupoAngariadoIndividual")', function() {
        // TODO: update the code to test the property numeroApoliceVidaEmGrupoAngariadoIndividual
        expect(instance).to.have.property('numeroApoliceVidaEmGrupoAngariadoIndividual');
        // expect(instance.numeroApoliceVidaEmGrupoAngariadoIndividual).to.be(expectedValueLiteral);
      });

      it('should have the property ehPensao (base name: "ehPensao")', function() {
        // TODO: update the code to test the property ehPensao
        expect(instance).to.have.property('ehPensao');
        // expect(instance.ehPensao).to.be(expectedValueLiteral);
      });

      it('should have the property vigenteParaComercializacao (base name: "vigenteParaComercializacao")', function() {
        // TODO: update the code to test the property vigenteParaComercializacao
        expect(instance).to.have.property('vigenteParaComercializacao');
        // expect(instance.vigenteParaComercializacao).to.be(expectedValueLiteral);
      });

      it('should have the property apoliceAngariadaIndividualmente (base name: "apoliceAngariadaIndividualmente")', function() {
        // TODO: update the code to test the property apoliceAngariadaIndividualmente
        expect(instance).to.have.property('apoliceAngariadaIndividualmente');
        // expect(instance.apoliceAngariadaIndividualmente).to.be(expectedValueLiteral);
      });

      it('should have the property exigeDps (base name: "exigeDps")', function() {
        // TODO: update the code to test the property exigeDps
        expect(instance).to.have.property('exigeDps');
        // expect(instance.exigeDps).to.be(expectedValueLiteral);
      });

      it('should have the property idadeExclusao (base name: "idadeExclusao")', function() {
        // TODO: update the code to test the property idadeExclusao
        expect(instance).to.have.property('idadeExclusao');
        // expect(instance.idadeExclusao).to.be(expectedValueLiteral);
      });

      it('should have the property processoSusepHistorico (base name: "processoSusepHistorico")', function() {
        // TODO: update the code to test the property processoSusepHistorico
        expect(instance).to.have.property('processoSusepHistorico');
        // expect(instance.processoSusepHistorico).to.be(expectedValueLiteral);
      });

      it('should have the property coberturaSusep (base name: "coberturaSusep")', function() {
        // TODO: update the code to test the property coberturaSusep
        expect(instance).to.have.property('coberturaSusep');
        // expect(instance.coberturaSusep).to.be(expectedValueLiteral);
      });

      it('should have the property pagamentosAntecipadosEmAnos (base name: "pagamentosAntecipadosEmAnos")', function() {
        // TODO: update the code to test the property pagamentosAntecipadosEmAnos
        expect(instance).to.have.property('pagamentosAntecipadosEmAnos');
        // expect(instance.pagamentosAntecipadosEmAnos).to.be(expectedValueLiteral);
      });

      it('should have the property itensDeServico (base name: "itensDeServico")', function() {
        // TODO: update the code to test the property itensDeServico
        expect(instance).to.have.property('itensDeServico');
        // expect(instance.itensDeServico).to.be(expectedValueLiteral);
      });

      it('should have the property exibeServicoNaListaDeCobertura (base name: "exibeServicoNaListaDeCobertura")', function() {
        // TODO: update the code to test the property exibeServicoNaListaDeCobertura
        expect(instance).to.have.property('exibeServicoNaListaDeCobertura');
        // expect(instance.exibeServicoNaListaDeCobertura).to.be(expectedValueLiteral);
      });

      it('should have the property valorServicoSomadoNaCoberturaDeReferencia (base name: "valorServicoSomadoNaCoberturaDeReferencia")', function() {
        // TODO: update the code to test the property valorServicoSomadoNaCoberturaDeReferencia
        expect(instance).to.have.property('valorServicoSomadoNaCoberturaDeReferencia');
        // expect(instance.valorServicoSomadoNaCoberturaDeReferencia).to.be(expectedValueLiteral);
      });

      it('should have the property franquia (base name: "franquia")', function() {
        // TODO: update the code to test the property franquia
        expect(instance).to.have.property('franquia');
        // expect(instance.franquia).to.be(expectedValueLiteral);
      });

      it('should have the property regrasCarenciaBeneficio (base name: "regrasCarenciaBeneficio")', function() {
        // TODO: update the code to test the property regrasCarenciaBeneficio
        expect(instance).to.have.property('regrasCarenciaBeneficio');
        // expect(instance.regrasCarenciaBeneficio).to.be(expectedValueLiteral);
      });

      it('should have the property regrasCarenciaProgressivaPorCausa (base name: "regrasCarenciaProgressivaPorCausa")', function() {
        // TODO: update the code to test the property regrasCarenciaProgressivaPorCausa
        expect(instance).to.have.property('regrasCarenciaProgressivaPorCausa');
        // expect(instance.regrasCarenciaProgressivaPorCausa).to.be(expectedValueLiteral);
      });

      it('should have the property doencasGraves (base name: "doencasGraves")', function() {
        // TODO: update the code to test the property doencasGraves
        expect(instance).to.have.property('doencasGraves');
        // expect(instance.doencasGraves).to.be(expectedValueLiteral);
      });

      it('should have the property decrescimoContribuicao (base name: "decrescimoContribuicao")', function() {
        // TODO: update the code to test the property decrescimoContribuicao
        expect(instance).to.have.property('decrescimoContribuicao');
        // expect(instance.decrescimoContribuicao).to.be(expectedValueLiteral);
      });

      it('should have the property formulaProlongamento (base name: "formulaProlongamento")', function() {
        // TODO: update the code to test the property formulaProlongamento
        expect(instance).to.have.property('formulaProlongamento');
        // expect(instance.formulaProlongamento).to.be(expectedValueLiteral);
      });

      it('should have the property adiantamentoContribuicao (base name: "adiantamentoContribuicao")', function() {
        // TODO: update the code to test the property adiantamentoContribuicao
        expect(instance).to.have.property('adiantamentoContribuicao');
        // expect(instance.adiantamentoContribuicao).to.be(expectedValueLiteral);
      });

      it('should have the property possuiDecrescimo (base name: "possuiDecrescimo")', function() {
        // TODO: update the code to test the property possuiDecrescimo
        expect(instance).to.have.property('possuiDecrescimo');
        // expect(instance.possuiDecrescimo).to.be(expectedValueLiteral);
      });

      it('should have the property permiteResgateParcial (base name: "permiteResgateParcial")', function() {
        // TODO: update the code to test the property permiteResgateParcial
        expect(instance).to.have.property('permiteResgateParcial');
        // expect(instance.permiteResgateParcial).to.be(expectedValueLiteral);
      });

      it('should have the property itemProdutoObrigatorio (base name: "itemProdutoObrigatorio")', function() {
        // TODO: update the code to test the property itemProdutoObrigatorio
        expect(instance).to.have.property('itemProdutoObrigatorio');
        // expect(instance.itemProdutoObrigatorio).to.be(expectedValueLiteral);
      });

      it('should have the property taxaFixa (base name: "taxaFixa")', function() {
        // TODO: update the code to test the property taxaFixa
        expect(instance).to.have.property('taxaFixa');
        // expect(instance.taxaFixa).to.be(expectedValueLiteral);
      });

      it('should have the property valorCapitalFixo (base name: "valorCapitalFixo")', function() {
        // TODO: update the code to test the property valorCapitalFixo
        expect(instance).to.have.property('valorCapitalFixo');
        // expect(instance.valorCapitalFixo).to.be(expectedValueLiteral);
      });

      it('should have the property descricaoComercial (base name: "descricaoComercial")', function() {
        // TODO: update the code to test the property descricaoComercial
        expect(instance).to.have.property('descricaoComercial');
        // expect(instance.descricaoComercial).to.be(expectedValueLiteral);
      });

      it('should have the property uFsRecusadasIds (base name: "uFsRecusadasIds")', function() {
        // TODO: update the code to test the property uFsRecusadasIds
        expect(instance).to.have.property('uFsRecusadasIds');
        // expect(instance.uFsRecusadasIds).to.be(expectedValueLiteral);
      });

      it('should have the property possuiDependenciaDeContratacaoExclusiva (base name: "possuiDependenciaDeContratacaoExclusiva")', function() {
        // TODO: update the code to test the property possuiDependenciaDeContratacaoExclusiva
        expect(instance).to.have.property('possuiDependenciaDeContratacaoExclusiva');
        // expect(instance.possuiDependenciaDeContratacaoExclusiva).to.be(expectedValueLiteral);
      });

      it('should have the property regrasCarenciaResgate (base name: "regrasCarenciaResgate")', function() {
        // TODO: update the code to test the property regrasCarenciaResgate
        expect(instance).to.have.property('regrasCarenciaResgate');
        // expect(instance.regrasCarenciaResgate).to.be(expectedValueLiteral);
      });

      it('should have the property valorMinimoCapitalContratacao (base name: "valorMinimoCapitalContratacao")', function() {
        // TODO: update the code to test the property valorMinimoCapitalContratacao
        expect(instance).to.have.property('valorMinimoCapitalContratacao');
        // expect(instance.valorMinimoCapitalContratacao).to.be(expectedValueLiteral);
      });

      it('should have the property valorLimiteCapitalReferencia (base name: "valorLimiteCapitalReferencia")', function() {
        // TODO: update the code to test the property valorLimiteCapitalReferencia
        expect(instance).to.have.property('valorLimiteCapitalReferencia');
        // expect(instance.valorLimiteCapitalReferencia).to.be(expectedValueLiteral);
      });

    });
  });

}));
