/*
 * API.Seguradora
 * Serviços de Negócios expostos através de RESTful services, para integrações com parceiros e agilidade no desenvolvimento interno de softwares da companhia.
 *
 * OpenAPI spec version: v1
 * Contact: integracaosistemas@mongeralaegon.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apiseguradora);
  }
}(this, function(expect, Apiseguradora) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Apiseguradora.ModeloNegocioApi();
  });

  describe('(package)', function() {
    describe('ModeloNegocioApi', function() {
      describe('apiversionmodeloNegocioidcnpjcnpjGET', function() {
        it('should call apiversionmodeloNegocioidcnpjcnpjGET successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionmodeloNegocioidcnpjcnpjGET call and complete the assertions
          /*
          var id = 56;
          var cnpj = "cnpj_example";
          var version = "version_example";
          var authorization = "authorization_example";

          instance.apiversionmodeloNegocioidcnpjcnpjGET(id, cnpj, version, authorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestAPISeguradoraContratoV1ModeloNegocioModeloNegocio);
            expect(data.valor).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioModeloNegocio);
                  expect(data.valor.modeloRelacionamento).to.be.a('number');
              expect(data.valor.modeloRelacionamento).to.be(0);
              expect(data.valor.nome).to.be.a('string');
              expect(data.valor.nome).to.be("");
              expect(data.valor.status).to.be.a('number');
              expect(data.valor.status).to.be(0);
              expect(data.valor.tipo).to.be.a('number');
              expect(data.valor.tipo).to.be(0);
              expect(data.valor.pessoaIdParceiro).to.be.a('number');
              expect(data.valor.pessoaIdParceiro).to.be(0);
              expect(data.valor.observacao).to.be.a('string');
              expect(data.valor.observacao).to.be("");
              expect(data.valor.dataCriacao).to.be.a(Date);
              expect(data.valor.dataCriacao).to.be(new Date());
              expect(data.valor.dataInativacao).to.be.a(Date);
              expect(data.valor.dataInativacao).to.be(new Date());
              expect(data.valor.cnpjParceiro).to.be.a('number');
              expect(data.valor.cnpjParceiro).to.be("0");
              expect(data.valor.nomeEmpresaModeloNegocio).to.be.a('string');
              expect(data.valor.nomeEmpresaModeloNegocio).to.be("");
              {
                let dataCtr = data.valor.teleUnderWriting;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTeleUnderWriting);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.empresaTeleUnderWriting).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioEmpresaTeleunderwriting);
                        expect(data.empresaTeleUnderWriting.id).to.be.a('number');
                    expect(data.empresaTeleUnderWriting.id).to.be(0);
                    expect(data.empresaTeleUnderWriting.empresaTeleUnderWritingPessoaId).to.be.a('number');
                    expect(data.empresaTeleUnderWriting.empresaTeleUnderWritingPessoaId).to.be(0);
                    expect(data.empresaTeleUnderWriting.nomeEmpresa).to.be.a('string');
                    expect(data.empresaTeleUnderWriting.nomeEmpresa).to.be("");
                    expect(data.empresaTeleUnderWriting.codigoEmpresa).to.be.a('string');
                    expect(data.empresaTeleUnderWriting.codigoEmpresa).to.be("");
                  expect(data.dataInicioVigencia).to.be.a(Date);
                  expect(data.dataInicioVigencia).to.be(new Date());
                  expect(data.dataFimVigencia).to.be.a(Date);
                  expect(data.dataFimVigencia).to.be(new Date());
                  expect(data.capitalMinimo).to.be.a('number');
                  expect(data.capitalMinimo).to.be(0.0);
                  expect(data.capitalMaximo).to.be.a('number');
                  expect(data.capitalMaximo).to.be(0.0);
                }
              }
              {
                let dataCtr = data.valor.produtosNegociados;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProdutoNegociado);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.modeloRelacionamentoProdutoId).to.be.a('number');
                  expect(data.modeloRelacionamentoProdutoId).to.be(0);
                  expect(data.sigla).to.be.a('string');
                  expect(data.sigla).to.be("");
                  expect(data.nome).to.be.a('string');
                  expect(data.nome).to.be("");
                  expect(data.nomeFantasia).to.be.a('string');
                  expect(data.nomeFantasia).to.be("");
                  expect(data.status).to.be.a('number');
                  expect(data.status).to.be(0);
                  expect(data.contratacaoObrigatoria).to.be.a('boolean');
                  expect(data.contratacaoObrigatoria).to.be(false);
                  expect(data.regraCobrancaId).to.be.a('number');
                  expect(data.regraCobrancaId).to.be(0);
                  expect(data.tipoProponente).to.be.a('number');
                  expect(data.tipoProponente).to.be(0);
                  expect(data.permiteAjuste).to.be.a('boolean');
                  expect(data.permiteAjuste).to.be(false);
                  expect(data.permiteReativacao).to.be.a('boolean');
                  expect(data.permiteReativacao).to.be(false);
                  expect(data.permiteReducao).to.be.a('boolean');
                  expect(data.permiteReducao).to.be(false);
                  expect(data.carteira).to.be.a('number');
                  expect(data.carteira).to.be(0);
                  expect(data.taxaDeRentabilidade).to.be.a('number');
                  expect(data.taxaDeRentabilidade).to.be(0.0);
                  {
                    let dataCtr = data.tiposDeRelacionamento;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  {
                    let dataCtr = data.dependencias;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoDependenciaProduto);
                      expect(data.produtoId).to.be.a('number');
                      expect(data.produtoId).to.be(0);
                      expect(data.tipo).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoTipoDependenciaProduto);
                            expect(data.tipo.id).to.be.a('number');
                        expect(data.tipo.id).to.be(0);
                        expect(data.tipo.descricao).to.be.a('string');
                        expect(data.tipo.descricao).to.be("");
                        expect(data.tipo.sigla).to.be.a('string');
                        expect(data.tipo.sigla).to.be("");
                    }
                  }
                  expect(data.regraCobranca).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCobranca);
                        expect(data.regraCobranca.id).to.be.a('number');
                    expect(data.regraCobranca.id).to.be(0);
                    expect(data.regraCobranca.tipoAgrupamentoId).to.be.a('number');
                    expect(data.regraCobranca.tipoAgrupamentoId).to.be(0);
                    expect(data.regraCobranca.permiteAgrupamento).to.be.a('boolean');
                    expect(data.regraCobranca.permiteAgrupamento).to.be(false);
                    expect(data.regraCobranca.cobrancaEmitidaMongeral).to.be.a('boolean');
                    expect(data.regraCobranca.cobrancaEmitidaMongeral).to.be(false);
                    expect(data.regraCobranca.emiteContribuicaoAntecipada).to.be.a('boolean');
                    expect(data.regraCobranca.emiteContribuicaoAntecipada).to.be(false);
                    expect(data.regraCobranca.quantidadeDeMesesDaContribuicaoAntecipada).to.be.a('number');
                    expect(data.regraCobranca.quantidadeDeMesesDaContribuicaoAntecipada).to.be(0);
                    {
                      let dataCtr = data.regraCobranca.diasVencimento;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    {
                      let dataCtr = data.regraCobranca.periodicidades;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    {
                      let dataCtr = data.regraCobranca.formasDeCobranca;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFormaCobrancaProduto);
                        expect(data.formaCobranca).to.be.a('string');
                        expect(data.formaCobranca).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.regraCobranca.conveniosAceitos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioConvenioAceito);
                        expect(data.convenioId).to.be.a('number');
                        expect(data.convenioId).to.be(0);
                        expect(data.ehDefault).to.be.a('boolean');
                        expect(data.ehDefault).to.be(false);
                        expect(data.numeroBanco).to.be.a('number');
                        expect(data.numeroBanco).to.be(0);
                        expect(data.formaCobrancaId).to.be.a('number');
                        expect(data.formaCobrancaId).to.be(0);
                      }
                    }
                  {
                    let dataCtr = data.coberturas;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado);
                      expect(data.modeloRelacionamentoItemProdutoId).to.be.a('number');
                      expect(data.modeloRelacionamentoItemProdutoId).to.be(0);
                      expect(data.modeloRelacionamentoProdutoId).to.be.a('number');
                      expect(data.modeloRelacionamentoProdutoId).to.be(0);
                      expect(data.produtoId).to.be.a('number');
                      expect(data.produtoId).to.be(0);
                      expect(data.itemProdutoId).to.be.a('number');
                      expect(data.itemProdutoId).to.be(0);
                      expect(data.sigla).to.be.a('string');
                      expect(data.sigla).to.be("");
                      expect(data.nome).to.be.a('string');
                      expect(data.nome).to.be("");
                      expect(data.numeroProcessoSusep).to.be.a('string');
                      expect(data.numeroProcessoSusep).to.be("");
                      expect(data.nomeFantasia).to.be.a('string');
                      expect(data.nomeFantasia).to.be("");
                      expect(data.tipo).to.be.a('number');
                      expect(data.tipo).to.be(0);
                      expect(data.grupoApolice).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioGrupoApolice);
                            expect(data.grupoApolice.id).to.be.a('string');
                        expect(data.grupoApolice.id).to.be("");
                        expect(data.grupoApolice.descricao).to.be.a('string');
                        expect(data.grupoApolice.descricao).to.be("");
                        expect(data.grupoApolice.sigla).to.be.a('string');
                        expect(data.grupoApolice.sigla).to.be("");
                      expect(data.valorMaximoCapital).to.be.a('number');
                      expect(data.valorMaximoCapital).to.be(0.0);
                      expect(data.tipoRelacaoSegurado).to.be.a('number');
                      expect(data.tipoRelacaoSegurado).to.be(0);
                      expect(data.codigoPlanoSysPrev).to.be.a('number');
                      expect(data.codigoPlanoSysPrev).to.be(0);
                      expect(data.codigoBeneficioSysPrev).to.be.a('number');
                      expect(data.codigoBeneficioSysPrev).to.be(0);
                      expect(data.idNegociacaoSysPrev).to.be.a('number');
                      expect(data.idNegociacaoSysPrev).to.be(0);
                      expect(data.utilizaClasseDeRiscoNaContratacao).to.be.a('boolean');
                      expect(data.utilizaClasseDeRiscoNaContratacao).to.be(false);
                      {
                        let dataCtr = data.beneficiariosPossiveis;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.prazoDeCobertura;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.dependencias;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoDependenciaCoberturaProduto);
                          expect(data.itemProdutoId).to.be.a('number');
                          expect(data.itemProdutoId).to.be(0);
                          expect(data.tipo).to.be.a('number');
                          expect(data.tipo).to.be(0);
                          expect(data.percentualMinimoReferencia).to.be.a('number');
                          expect(data.percentualMinimoReferencia).to.be(0.0);
                          expect(data.percentualMaximoReferencia).to.be.a('number');
                          expect(data.percentualMaximoReferencia).to.be(0.0);
                        }
                      }
                      {
                        let dataCtr = data.formasContratacao;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFormaContratacao);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.descricao).to.be.a('string');
                          expect(data.descricao).to.be("");
                        }
                      }
                      expect(data.possuiIof).to.be.a('boolean');
                      expect(data.possuiIof).to.be(false);
                      expect(data.indiceContribuicaoId).to.be.a('number');
                      expect(data.indiceContribuicaoId).to.be(0);
                      expect(data.indiceBeneficioId).to.be.a('number');
                      expect(data.indiceBeneficioId).to.be(0);
                      {
                        let dataCtr = data.rendas;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRenda);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.tipo).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoRenda);
                                expect(data.tipo.id).to.be.a('string');
                            expect(data.tipo.id).to.be("");
                            expect(data.tipo.descricao).to.be.a('string');
                            expect(data.tipo.descricao).to.be("");
                            expect(data.tipo.sigla).to.be.a('string');
                            expect(data.tipo.sigla).to.be("");
                          expect(data.ehPadrao).to.be.a('boolean');
                          expect(data.ehPadrao).to.be(false);
                          expect(data.prazoInicial).to.be.a('number');
                          expect(data.prazoInicial).to.be(0);
                          expect(data.prazoFinal).to.be.a('number');
                          expect(data.prazoFinal).to.be(0);
                          expect(data.prazoPadrao).to.be.a('number');
                          expect(data.prazoPadrao).to.be(0);
                          expect(data.idadeMaioridade).to.be.a('number');
                          expect(data.idadeMaioridade).to.be(0);
                        }
                      }
                      expect(data.codigoServicoPrestadora).to.be.a('string');
                      expect(data.codigoServicoPrestadora).to.be("");
                      expect(data.tipoServico).to.be.a('number');
                      expect(data.tipoServico).to.be(0);
                      expect(data.nomeServico).to.be.a('string');
                      expect(data.nomeServico).to.be("");
                      expect(data.versao).to.be.a('string');
                      expect(data.versao).to.be("");
                      {
                        let dataCtr = data.valoresRepassadoAoCliente;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioValorRepassadoAoCliente);
                          expect(data.valor).to.be.a('number');
                          expect(data.valor).to.be(0.0);
                          expect(data.idadeInicial).to.be.a('number');
                          expect(data.idadeInicial).to.be(0);
                          expect(data.idadeFinal).to.be.a('number');
                          expect(data.idadeFinal).to.be(0);
                          expect(data.tipoRepasseCliente).to.be.a('string');
                          expect(data.tipoRepasseCliente).to.be("NaoInformado");
                        }
                      }
                      {
                        let dataCtr = data.fundos;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoFundo);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.cnpj).to.be.a('string');
                          expect(data.cnpj).to.be("");
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.nomeFantasia).to.be.a('string');
                          expect(data.nomeFantasia).to.be("");
                          expect(data.percentualRendaVariavel).to.be.a('number');
                          expect(data.percentualRendaVariavel).to.be(0.0);
                        }
                      }
                      expect(data.valorMinimoContribuicaoMensal).to.be.a('number');
                      expect(data.valorMinimoContribuicaoMensal).to.be(0.0);
                      expect(data.valorMinimoContribuicaoMensalComAporteUnico).to.be.a('number');
                      expect(data.valorMinimoContribuicaoMensalComAporteUnico).to.be(0.0);
                      expect(data.valorMinimoPortabilidadeEntrada).to.be.a('number');
                      expect(data.valorMinimoPortabilidadeEntrada).to.be(0.0);
                      expect(data.valorMaximoPortabilidadeEntrada).to.be.a('number');
                      expect(data.valorMaximoPortabilidadeEntrada).to.be(0.0);
                      expect(data.valorMinimoPortabilidadeSaida).to.be.a('number');
                      expect(data.valorMinimoPortabilidadeSaida).to.be(0.0);
                      expect(data.valorMinimoAporte).to.be.a('number');
                      expect(data.valorMinimoAporte).to.be(0.0);
                      expect(data.valorMaximoAporte).to.be.a('number');
                      expect(data.valorMaximoAporte).to.be(0.0);
                      expect(data.valorMinimoAporteUnico).to.be.a('number');
                      expect(data.valorMinimoAporteUnico).to.be(0.0);
                      expect(data.valorMaximoAporteUnico).to.be.a('number');
                      expect(data.valorMaximoAporteUnico).to.be(0.0);
                      expect(data.valorMinimoSaldo).to.be.a('number');
                      expect(data.valorMinimoSaldo).to.be(0.0);
                      expect(data.valorMaximoSaldo).to.be.a('number');
                      expect(data.valorMaximoSaldo).to.be(0.0);
                      expect(data.valorMinimoResgate).to.be.a('number');
                      expect(data.valorMinimoResgate).to.be(0.0);
                      expect(data.quantidadeMinimaContribuicao).to.be.a('number');
                      expect(data.quantidadeMinimaContribuicao).to.be(0);
                      expect(data.intervaloEntreAportesMeses).to.be.a('number');
                      expect(data.intervaloEntreAportesMeses).to.be(0);
                      expect(data.limitePrazoDiferimentoAnos).to.be.a('number');
                      expect(data.limitePrazoDiferimentoAnos).to.be(0);
                      expect(data.idadeMinima).to.be.a('number');
                      expect(data.idadeMinima).to.be(0);
                      expect(data.idadeMaxima).to.be.a('number');
                      expect(data.idadeMaxima).to.be(0);
                      expect(data.prazoMinimoDiferimento).to.be.a('number');
                      expect(data.prazoMinimoDiferimento).to.be(0);
                      expect(data.prazoMaximoDiferimento).to.be.a('number');
                      expect(data.prazoMaximoDiferimento).to.be(0);
                      expect(data.idadeLimiteAposentadoria).to.be.a('number');
                      expect(data.idadeLimiteAposentadoria).to.be(0);
                      expect(data.coberturaId).to.be.a('number');
                      expect(data.coberturaId).to.be(0);
                      {
                        let dataCtr = data.classesDeRisco;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioClasseRisco);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.descricao).to.be.a('string');
                          expect(data.descricao).to.be("");
                          expect(data.prazoCobertura).to.be.a('number');
                          expect(data.prazoCobertura).to.be(0);
                          expect(data.fumante).to.be.a('boolean');
                          expect(data.fumante).to.be(false);
                          {
                            let dataCtr = data.profissoes;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProfissao);
                              expect(data.id).to.be.a('number');
                              expect(data.id).to.be(0);
                              expect(data.cbo).to.be.a('string');
                              expect(data.cbo).to.be("");
                              expect(data.descricao).to.be.a('string');
                              expect(data.descricao).to.be("");
                            }
                          }
                        }
                      }
                      expect(data.possuiDependenciaDeImplantacao).to.be.a('boolean');
                      expect(data.possuiDependenciaDeImplantacao).to.be(false);
                      expect(data.possuiDependenciaDeCancelamento).to.be.a('boolean');
                      expect(data.possuiDependenciaDeCancelamento).to.be(false);
                      expect(data.ehServico).to.be.a('boolean');
                      expect(data.ehServico).to.be(false);
                      expect(data.ehSobrevivencia).to.be.a('boolean');
                      expect(data.ehSobrevivencia).to.be(false);
                      expect(data.ehAposentadoria).to.be.a('boolean');
                      expect(data.ehAposentadoria).to.be(false);
                      expect(data.ehFundoAcumulacao).to.be.a('boolean');
                      expect(data.ehFundoAcumulacao).to.be(false);
                      {
                        let dataCtr = data.profissoesRecusadasIds;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      expect(data.segmentoNegocio).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioSegmentoNegocio);
                            expect(data.segmentoNegocio.id).to.be.a('string');
                        expect(data.segmentoNegocio.id).to.be("");
                        expect(data.segmentoNegocio.descricao).to.be.a('string');
                        expect(data.segmentoNegocio.descricao).to.be("");
                        expect(data.segmentoNegocio.sigla).to.be.a('string');
                        expect(data.segmentoNegocio.sigla).to.be("");
                      expect(data.ehRisco).to.be.a('boolean');
                      expect(data.ehRisco).to.be(false);
                      expect(data.dataInicioContratoServico).to.be.a(Date);
                      expect(data.dataInicioContratoServico).to.be(new Date());
                      expect(data.dataFimContratoServico).to.be.a(Date);
                      expect(data.dataFimContratoServico).to.be(new Date());
                      expect(data.prestadorServicoPessoaId).to.be.a('number');
                      expect(data.prestadorServicoPessoaId).to.be(0);
                      expect(data.nomeClasseRiscoPadrao).to.be.a('string');
                      expect(data.nomeClasseRiscoPadrao).to.be("");
                      expect(data.classeDeRiscoPadraoParaContratacao).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioClasseRisco);
                            expect(data.classeDeRiscoPadraoParaContratacao.id).to.be.a('number');
                        expect(data.classeDeRiscoPadraoParaContratacao.id).to.be(0);
                        expect(data.classeDeRiscoPadraoParaContratacao.sigla).to.be.a('string');
                        expect(data.classeDeRiscoPadraoParaContratacao.sigla).to.be("");
                        expect(data.classeDeRiscoPadraoParaContratacao.descricao).to.be.a('string');
                        expect(data.classeDeRiscoPadraoParaContratacao.descricao).to.be("");
                        expect(data.classeDeRiscoPadraoParaContratacao.prazoCobertura).to.be.a('number');
                        expect(data.classeDeRiscoPadraoParaContratacao.prazoCobertura).to.be(0);
                        expect(data.classeDeRiscoPadraoParaContratacao.fumante).to.be.a('boolean');
                        expect(data.classeDeRiscoPadraoParaContratacao.fumante).to.be(false);
                        {
                          let dataCtr = data.classeDeRiscoPadraoParaContratacao.profissoes;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProfissao);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.cbo).to.be.a('string');
                            expect(data.cbo).to.be("");
                            expect(data.descricao).to.be.a('string');
                            expect(data.descricao).to.be("");
                          }
                        }
                      expect(data.tipoContaCorporateId).to.be.a('number');
                      expect(data.tipoContaCorporateId).to.be(0);
                      expect(data.numeroApoliceVidaEmGrupoAngariadoIndividual).to.be.a('string');
                      expect(data.numeroApoliceVidaEmGrupoAngariadoIndividual).to.be("");
                      expect(data.ehPensao).to.be.a('boolean');
                      expect(data.ehPensao).to.be(false);
                      expect(data.vigenteParaComercializacao).to.be.a('boolean');
                      expect(data.vigenteParaComercializacao).to.be(false);
                      expect(data.apoliceAngariadaIndividualmente).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioApoliceAngariadaIndividualmente);
                            expect(data.apoliceAngariadaIndividualmente.numero).to.be.a('string');
                        expect(data.apoliceAngariadaIndividualmente.numero).to.be("");
                        expect(data.apoliceAngariadaIndividualmente.estipulantePessoaId).to.be.a('number');
                        expect(data.apoliceAngariadaIndividualmente.estipulantePessoaId).to.be(0);
                        expect(data.apoliceAngariadaIndividualmente.dataInicio).to.be.a(Date);
                        expect(data.apoliceAngariadaIndividualmente.dataInicio).to.be(new Date());
                        expect(data.apoliceAngariadaIndividualmente.dataFim).to.be.a(Date);
                        expect(data.apoliceAngariadaIndividualmente.dataFim).to.be(new Date());
                      expect(data.exigeDps).to.be.a('boolean');
                      expect(data.exigeDps).to.be(false);
                      expect(data.idadeExclusao).to.be.a('number');
                      expect(data.idadeExclusao).to.be(0);
                      expect(data.processoSusepHistorico).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProcessoSusepHistorico);
                            expect(data.processoSusepHistorico.numeroProcesso).to.be.a('string');
                        expect(data.processoSusepHistorico.numeroProcesso).to.be("");
                        expect(data.processoSusepHistorico.complementoNumeroProcesso).to.be.a('string');
                        expect(data.processoSusepHistorico.complementoNumeroProcesso).to.be("");
                        expect(data.processoSusepHistorico.reajusteAutomatico).to.be.a('boolean');
                        expect(data.processoSusepHistorico.reajusteAutomatico).to.be(false);
                        expect(data.processoSusepHistorico.cancelaAutomatico).to.be.a('boolean');
                        expect(data.processoSusepHistorico.cancelaAutomatico).to.be(false);
                        expect(data.processoSusepHistorico.vigenciaVitalicia).to.be.a('boolean');
                        expect(data.processoSusepHistorico.vigenciaVitalicia).to.be(false);
                        expect(data.processoSusepHistorico.vigenciaRenovavelAutomaticamente).to.be.a('boolean');
                        expect(data.processoSusepHistorico.vigenciaRenovavelAutomaticamente).to.be(false);
                        expect(data.processoSusepHistorico.quantidadeRenovacoesAutomaticas).to.be.a('number');
                        expect(data.processoSusepHistorico.quantidadeRenovacoesAutomaticas).to.be(0);
                        expect(data.processoSusepHistorico.vigenciaMesesRenovacoesAutomaticas).to.be.a('number');
                        expect(data.processoSusepHistorico.vigenciaMesesRenovacoesAutomaticas).to.be(0);
                        expect(data.processoSusepHistorico.vigenciaMesesRenovacoesNaoAutomaticas).to.be.a('number');
                        expect(data.processoSusepHistorico.vigenciaMesesRenovacoesNaoAutomaticas).to.be(0);
                        expect(data.processoSusepHistorico.vigenciaIndependenteEntreCoberturas).to.be.a('boolean');
                        expect(data.processoSusepHistorico.vigenciaIndependenteEntreCoberturas).to.be(false);
                        expect(data.processoSusepHistorico.permiteRenovacao).to.be.a('boolean');
                        expect(data.processoSusepHistorico.permiteRenovacao).to.be(false);
                        expect(data.processoSusepHistorico.reenquadramentoAutomatico).to.be.a('boolean');
                        expect(data.processoSusepHistorico.reenquadramentoAutomatico).to.be(false);
                      expect(data.coberturaSusep).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCoberturaSusep);
                            expect(data.coberturaSusep.id).to.be.a('number');
                        expect(data.coberturaSusep.id).to.be(0);
                        expect(data.coberturaSusep.sigla).to.be.a('string');
                        expect(data.coberturaSusep.sigla).to.be("");
                        expect(data.coberturaSusep.descricao).to.be.a('string');
                        expect(data.coberturaSusep.descricao).to.be("");
                        expect(data.coberturaSusep.tipoCoberturaProvisaoId).to.be.a('number');
                        expect(data.coberturaSusep.tipoCoberturaProvisaoId).to.be(0);
                      {
                        let dataCtr = data.pagamentosAntecipadosEmAnos;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.itensDeServico;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServico);
                          expect(data.tipoServico).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoServico);
                                expect(data.tipoServico.id).to.be.a('string');
                            expect(data.tipoServico.id).to.be("");
                            expect(data.tipoServico.descricao).to.be.a('string');
                            expect(data.tipoServico.descricao).to.be("");
                            expect(data.tipoServico.sigla).to.be.a('string');
                            expect(data.tipoServico.sigla).to.be("");
                          expect(data.servicoId).to.be.a('number');
                          expect(data.servicoId).to.be(0);
                          expect(data.itemServicoId).to.be.a('number');
                          expect(data.itemServicoId).to.be(0);
                          expect(data.descricao).to.be.a('string');
                          expect(data.descricao).to.be("");
                          expect(data.nome).to.be.a('string');
                          expect(data.nome).to.be("");
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.assitencialCondicionado).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoAssitencialCondicionado);
                                expect(data.assitencialCondicionado.valorMinimoObterServico).to.be.a('number');
                            expect(data.assitencialCondicionado.valorMinimoObterServico).to.be(0.0);
                            expect(data.assitencialCondicionado.idadeMinima).to.be.a('number');
                            expect(data.assitencialCondicionado.idadeMinima).to.be(0);
                            expect(data.assitencialCondicionado.idadeMaxima).to.be.a('number');
                            expect(data.assitencialCondicionado.idadeMaxima).to.be(0);
                            expect(data.assitencialCondicionado.produtoId).to.be.a('number');
                            expect(data.assitencialCondicionado.produtoId).to.be(0);
                            expect(data.assitencialCondicionado.sexoId).to.be.a('string');
                            expect(data.assitencialCondicionado.sexoId).to.be("");
                          expect(data.cestaBasica).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoCestaBasica);
                                expect(data.cestaBasica.periodo).to.be.a('number');
                            expect(data.cestaBasica.periodo).to.be(0);
                            expect(data.cestaBasica.valorCesta).to.be.a('number');
                            expect(data.cestaBasica.valorCesta).to.be(0.0);
                            expect(data.cestaBasica.periodicidadeId).to.be.a('number');
                            expect(data.cestaBasica.periodicidadeId).to.be(0);
                          expect(data.sorteio).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoSorteio);
                                expect(data.sorteio.periodicidadeId).to.be.a('number');
                            expect(data.sorteio.periodicidadeId).to.be(0);
                            expect(data.sorteio.centenaMilhar).to.be.a('number');
                            expect(data.sorteio.centenaMilhar).to.be(0.0);
                            expect(data.sorteio.dezenaMilhar).to.be.a('number');
                            expect(data.sorteio.dezenaMilhar).to.be(0.0);
                            expect(data.sorteio.milhar).to.be.a('number');
                            expect(data.sorteio.milhar).to.be(0.0);
                            expect(data.sorteio.centena).to.be.a('number');
                            expect(data.sorteio.centena).to.be(0.0);
                            expect(data.sorteio.dezena).to.be.a('number');
                            expect(data.sorteio.dezena).to.be(0.0);
                            expect(data.sorteio.quotaCapitalizacao).to.be.a('number');
                            expect(data.sorteio.quotaCapitalizacao).to.be(0.0);
                            expect(data.sorteio.quotaSorteio).to.be.a('number');
                            expect(data.sorteio.quotaSorteio).to.be(0.0);
                            expect(data.sorteio.taxaJuros).to.be.a('number');
                            expect(data.sorteio.taxaJuros).to.be(0.0);
                            expect(data.sorteio.qtdeSorteioMes).to.be.a('number');
                            expect(data.sorteio.qtdeSorteioMes).to.be(0);
                            expect(data.sorteio.valorSorteio).to.be.a('number');
                            expect(data.sorteio.valorSorteio).to.be(0.0);
                            expect(data.sorteio.valorLimiteInferiorSorteio).to.be.a('number');
                            expect(data.sorteio.valorLimiteInferiorSorteio).to.be(0.0);
                            expect(data.sorteio.valorLimiteSuperiorSorteio).to.be.a('number');
                            expect(data.sorteio.valorLimiteSuperiorSorteio).to.be(0.0);
                            expect(data.sorteio.percentualCapital).to.be.a('number');
                            expect(data.sorteio.percentualCapital).to.be(0.0);
                            expect(data.sorteio.fatorContribuicaoCobertura).to.be.a('number');
                            expect(data.sorteio.fatorContribuicaoCobertura).to.be(0.0);
                            expect(data.sorteio.numeroProcessoSorteio).to.be.a('string');
                            expect(data.sorteio.numeroProcessoSorteio).to.be("");
                            expect(data.sorteio.tipoLayoutArquivoSorteioId).to.be.a('number');
                            expect(data.sorteio.tipoLayoutArquivoSorteioId).to.be(0);
                          expect(data.safAFFamiliar).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoSAF);
                                expect(data.safAFFamiliar.valorGarantido).to.be.a('number');
                            expect(data.safAFFamiliar.valorGarantido).to.be(0.0);
                          expect(data.safIndividual).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoSAF);
                                expect(data.safIndividual.valorGarantido).to.be.a('number');
                            expect(data.safIndividual.valorGarantido).to.be(0.0);
                        }
                      }
                      expect(data.exibeServicoNaListaDeCobertura).to.be.a('boolean');
                      expect(data.exibeServicoNaListaDeCobertura).to.be(false);
                      expect(data.valorServicoSomadoNaCoberturaDeReferencia).to.be.a('boolean');
                      expect(data.valorServicoSomadoNaCoberturaDeReferencia).to.be(false);
                      expect(data.franquia).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFranquia);
                            expect(data.franquia.diasFranquia).to.be.a('number');
                        expect(data.franquia.diasFranquia).to.be(0);
                        expect(data.franquia.maximoDiariasPorEvento).to.be.a('number');
                        expect(data.franquia.maximoDiariasPorEvento).to.be(0);
                        expect(data.franquia.limiteDiarias).to.be.a('number');
                        expect(data.franquia.limiteDiarias).to.be(0);
                      {
                        let dataCtr = data.regrasCarenciaBeneficio;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCarenciaBeneficio);
                          expect(data.tipoId).to.be.a('number');
                          expect(data.tipoId).to.be(0);
                          expect(data.anulaCarenciaComDps).to.be.a('boolean');
                          expect(data.anulaCarenciaComDps).to.be(false);
                          expect(data.quantidade).to.be.a('number');
                          expect(data.quantidade).to.be(0);
                          {
                            let dataCtr = data.progressivo;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioBeneficioProgressivo);
                              expect(data.percentual).to.be.a('number');
                              expect(data.percentual).to.be(0.0);
                              expect(data.inicial).to.be.a('number');
                              expect(data.inicial).to.be(0);
                              expect(data._final).to.be.a('number');
                              expect(data._final).to.be(0);
                            }
                          }
                          expect(data.tipoCarenciaBeneficio).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoCarenciaBeneficio);
                                expect(data.tipoCarenciaBeneficio.id).to.be.a('string');
                            expect(data.tipoCarenciaBeneficio.id).to.be("");
                            expect(data.tipoCarenciaBeneficio.descricao).to.be.a('string');
                            expect(data.tipoCarenciaBeneficio.descricao).to.be("");
                            expect(data.tipoCarenciaBeneficio.sigla).to.be.a('string');
                            expect(data.tipoCarenciaBeneficio.sigla).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.regrasCarenciaProgressivaPorCausa;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCarenciaProgressivaPorCausa);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.inicial).to.be.a('number');
                          expect(data.inicial).to.be(0);
                          expect(data._final).to.be.a('number');
                          expect(data._final).to.be(0);
                          expect(data.percentualBeneficio).to.be.a('number');
                          expect(data.percentualBeneficio).to.be(0.0);
                          expect(data.causaFatorGerador).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCausaFatoGerador);
                                expect(data.causaFatorGerador.id).to.be.a('number');
                            expect(data.causaFatorGerador.id).to.be(0);
                            expect(data.causaFatorGerador.descricao).to.be.a('string');
                            expect(data.causaFatorGerador.descricao).to.be("");
                            expect(data.causaFatorGerador.subGrupoCausaFatoGerador).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioSubGrupoCausaFatoGerador);
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.id).to.be.a('number');
                              expect(data.causaFatorGerador.subGrupoCausaFatoGerador.id).to.be(0);
                              expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioGrupoCausaFatoGerador);
                                    expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.id).to.be.a('number');
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.id).to.be(0);
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.descricao).to.be.a('string');
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.descricao).to.be("");
                              expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioGrupoCausaFatoGerador);
                                    expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.id).to.be.a('number');
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.id).to.be(0);
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.descricao).to.be.a('string');
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.descricao).to.be("");
                          expect(data.coberturaProcessoHistoricoId).to.be.a('number');
                          expect(data.coberturaProcessoHistoricoId).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.doencasGraves;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioDoencasGraves);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.descricao).to.be.a('string');
                          expect(data.descricao).to.be("");
                          expect(data.ordemApresentacao).to.be.a('number');
                          expect(data.ordemApresentacao).to.be(0);
                          expect(data.excluido).to.be.a('number');
                          expect(data.excluido).to.be(0);
                          expect(data.itemProdutoId).to.be.a('number');
                          expect(data.itemProdutoId).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.decrescimoContribuicao;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioDecrescimoContribuicao);
                          expect(data.ano).to.be.a('number');
                          expect(data.ano).to.be(0);
                          expect(data.prazo).to.be.a('number');
                          expect(data.prazo).to.be(0);
                          expect(data.percentual).to.be.a('number');
                          expect(data.percentual).to.be(0.0);
                        }
                      }
                      {
                        let dataCtr = data.formulaProlongamento;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFormulaProlongamento);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.descricao).to.be.a('string');
                          expect(data.descricao).to.be("");
                          expect(data.ordemApresentacao).to.be.a('number');
                          expect(data.ordemApresentacao).to.be(0);
                          expect(data.excluido).to.be.a('boolean');
                          expect(data.excluido).to.be(false);
                          expect(data.nomeArquivo).to.be.a('string');
                          expect(data.nomeArquivo).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.adiantamentoContribuicao;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioAdiantamentoContribuicao);
                          {
                            let dataCtr = data.prazo;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('number');
                              expect(data).to.be(0);
                            }
                          }
                          {
                            let dataCtr = data.idade;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('number');
                              expect(data).to.be(0);
                            }
                          }
                        }
                      }
                      expect(data.possuiDecrescimo).to.be.a('boolean');
                      expect(data.possuiDecrescimo).to.be(false);
                      expect(data.permiteResgateParcial).to.be.a('boolean');
                      expect(data.permiteResgateParcial).to.be(false);
                      expect(data.itemProdutoObrigatorio).to.be.a('boolean');
                      expect(data.itemProdutoObrigatorio).to.be(false);
                      expect(data.taxaFixa).to.be.a('boolean');
                      expect(data.taxaFixa).to.be(false);
                      expect(data.valorCapitalFixo).to.be.a('number');
                      expect(data.valorCapitalFixo).to.be(0.0);
                      expect(data.descricaoComercial).to.be.a('string');
                      expect(data.descricaoComercial).to.be("");
                      {
                        let dataCtr = data.uFsRecusadasIds;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.possuiDependenciaDeContratacaoExclusiva).to.be.a('boolean');
                      expect(data.possuiDependenciaDeContratacaoExclusiva).to.be(false);
                      {
                        let dataCtr = data.regrasCarenciaResgate;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCarenciaResgate);
                          expect(data.quantidade).to.be.a('number');
                          expect(data.quantidade).to.be(0);
                          {
                            let dataCtr = data.progressivo;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioResgateCarenciaProgressivo);
                              expect(data.percentual).to.be.a('number');
                              expect(data.percentual).to.be(0.0);
                              expect(data.inicial).to.be.a('number');
                              expect(data.inicial).to.be(0);
                              expect(data._final).to.be.a('number');
                              expect(data._final).to.be(0);
                            }
                          }
                          expect(data.tipoCarenciaResgate).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoCarenciaResgate);
                                expect(data.tipoCarenciaResgate.id).to.be.a('string');
                            expect(data.tipoCarenciaResgate.id).to.be("");
                            expect(data.tipoCarenciaResgate.descricao).to.be.a('string');
                            expect(data.tipoCarenciaResgate.descricao).to.be("");
                            expect(data.tipoCarenciaResgate.sigla).to.be.a('string');
                            expect(data.tipoCarenciaResgate.sigla).to.be("");
                        }
                      }
                      expect(data.valorMinimoCapitalContratacao).to.be.a('number');
                      expect(data.valorMinimoCapitalContratacao).to.be(0.0);
                      expect(data.valorLimiteCapitalReferencia).to.be.a('number');
                      expect(data.valorLimiteCapitalReferencia).to.be(0.0);
                    }
                  }
                  expect(data.codigoPlanoSysPrev).to.be.a('number');
                  expect(data.codigoPlanoSysPrev).to.be(0);
                  expect(data.ehComercializado).to.be.a('boolean');
                  expect(data.ehComercializado).to.be(false);
                  expect(data.restricaoSexo).to.be.a('string');
                  expect(data.restricaoSexo).to.be("");
                  expect(data.referenciaCoberturaId).to.be.a('number');
                  expect(data.referenciaCoberturaId).to.be(0);
                  expect(data.produtoPrincipal).to.be.a('boolean');
                  expect(data.produtoPrincipal).to.be(false);
                  {
                    let dataCtr = data.profissoesAceitas;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  expect(data.permiteContratacaoParcial).to.be.a('boolean');
                  expect(data.permiteContratacaoParcial).to.be(false);
                  expect(data.estahRestrito).to.be.a('boolean');
                  expect(data.estahRestrito).to.be(false);
                  expect(data.descricaoComercial).to.be.a('string');
                  expect(data.descricaoComercial).to.be("");
                  expect(data.valorMinimoCapitalContratacao).to.be.a('number');
                  expect(data.valorMinimoCapitalContratacao).to.be(0.0);
                  expect(data.valorLimiteCapitalReferencia).to.be.a('number');
                  expect(data.valorLimiteCapitalReferencia).to.be(0.0);
                }
              }
              {
                let dataCtr = data.valor.regrasDependencia;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoDependenciaProduto);
                  expect(data.produtoId).to.be.a('number');
                  expect(data.produtoId).to.be(0);
                  expect(data.tipo).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoTipoDependenciaProduto);
                        expect(data.tipo.id).to.be.a('number');
                    expect(data.tipo.id).to.be(0);
                    expect(data.tipo.descricao).to.be.a('string');
                    expect(data.tipo.descricao).to.be("");
                    expect(data.tipo.sigla).to.be.a('string');
                    expect(data.tipo.sigla).to.be("");
                }
              }
              expect(data.valor.regrasAceitacao).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioPoliticaDeAceitacao);
                    expect(data.valor.regrasAceitacao.codigoModeloProposta).to.be.a('string');
                expect(data.valor.regrasAceitacao.codigoModeloProposta).to.be("");
                expect(data.valor.regrasAceitacao.dataVigencia).to.be.a(Date);
                expect(data.valor.regrasAceitacao.dataVigencia).to.be(new Date());
                expect(data.valor.regrasAceitacao.statusPoliticaAceitacao).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioStatusPoliticaAceitacao);
                      expect(data.valor.regrasAceitacao.statusPoliticaAceitacao.id).to.be.a('string');
                  expect(data.valor.regrasAceitacao.statusPoliticaAceitacao.id).to.be("");
                  expect(data.valor.regrasAceitacao.statusPoliticaAceitacao.descricao).to.be.a('string');
                  expect(data.valor.regrasAceitacao.statusPoliticaAceitacao.descricao).to.be("");
                  expect(data.valor.regrasAceitacao.statusPoliticaAceitacao.sigla).to.be.a('string');
                  expect(data.valor.regrasAceitacao.statusPoliticaAceitacao.sigla).to.be("");
                expect(data.valor.regrasAceitacao.descricao).to.be.a('string');
                expect(data.valor.regrasAceitacao.descricao).to.be("");
                expect(data.valor.regrasAceitacao.minimoContribuicaoClientesNovos).to.be.a('number');
                expect(data.valor.regrasAceitacao.minimoContribuicaoClientesNovos).to.be(0.0);
                expect(data.valor.regrasAceitacao.minimoContribuicaoClientesAntigos).to.be.a('number');
                expect(data.valor.regrasAceitacao.minimoContribuicaoClientesAntigos).to.be(0.0);
                expect(data.valor.regrasAceitacao.imcMinimoRecusa).to.be.a('number');
                expect(data.valor.regrasAceitacao.imcMinimoRecusa).to.be(0.0);
                expect(data.valor.regrasAceitacao.imcMinimoExame).to.be.a('number');
                expect(data.valor.regrasAceitacao.imcMinimoExame).to.be(0.0);
                expect(data.valor.regrasAceitacao.imcMaximoRecusa).to.be.a('number');
                expect(data.valor.regrasAceitacao.imcMaximoRecusa).to.be(0.0);
                expect(data.valor.regrasAceitacao.imcMaximoExame).to.be.a('number');
                expect(data.valor.regrasAceitacao.imcMaximoExame).to.be(0.0);
                expect(data.valor.regrasAceitacao.qtdeMaximaCigarrosRecusa).to.be.a('number');
                expect(data.valor.regrasAceitacao.qtdeMaximaCigarrosRecusa).to.be(0);
                expect(data.valor.regrasAceitacao.qtdeMaximaCigarrosExame).to.be.a('number');
                expect(data.valor.regrasAceitacao.qtdeMaximaCigarrosExame).to.be(0);
                expect(data.valor.regrasAceitacao.diasMaximoRecusa).to.be.a('number');
                expect(data.valor.regrasAceitacao.diasMaximoRecusa).to.be(0);
                expect(data.valor.regrasAceitacao.mesesEntreSubscricoes).to.be.a('number');
                expect(data.valor.regrasAceitacao.mesesEntreSubscricoes).to.be(0);
                expect(data.valor.regrasAceitacao.mesesEntreResgates).to.be.a('number');
                expect(data.valor.regrasAceitacao.mesesEntreResgates).to.be(0);
                expect(data.valor.regrasAceitacao.mesesEntreReducoesContribuicao).to.be.a('number');
                expect(data.valor.regrasAceitacao.mesesEntreReducoesContribuicao).to.be(0);
                expect(data.valor.regrasAceitacao.valorCapitalAcionarCoaf).to.be.a('number');
                expect(data.valor.regrasAceitacao.valorCapitalAcionarCoaf).to.be(0.0);
                expect(data.valor.regrasAceitacao.exigeConfirmacaoVenda).to.be.a('boolean');
                expect(data.valor.regrasAceitacao.exigeConfirmacaoVenda).to.be(false);
                expect(data.valor.regrasAceitacao.dataCriacao).to.be.a(Date);
                expect(data.valor.regrasAceitacao.dataCriacao).to.be(new Date());
                expect(data.valor.regrasAceitacao.dataInicioVigencia).to.be.a(Date);
                expect(data.valor.regrasAceitacao.dataInicioVigencia).to.be(new Date());
                expect(data.valor.regrasAceitacao.dataFimVigencia).to.be.a(Date);
                expect(data.valor.regrasAceitacao.dataFimVigencia).to.be(new Date());
                expect(data.valor.regrasAceitacao.mesesEntreCancelamentos).to.be.a('number');
                expect(data.valor.regrasAceitacao.mesesEntreCancelamentos).to.be(0);
                {
                  let dataCtr = data.valor.regrasAceitacao.limitesOperacionais;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimiteOperacionalPorFaixa);
                    expect(data.sigla).to.be.a('string');
                    expect(data.sigla).to.be("");
                    expect(data.descricao).to.be.a('string');
                    expect(data.descricao).to.be("");
                    expect(data.nomeTipoLimiteOperacional).to.be.a('string');
                    expect(data.nomeTipoLimiteOperacional).to.be("");
                    expect(data.tipoGrupoCobertura).to.be.a('string');
                    expect(data.tipoGrupoCobertura).to.be("");
                    {
                      let dataCtr = data.coberturasIds;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    expect(data.tipoLimiteOperacional).to.be.a('string');
                    expect(data.tipoLimiteOperacional).to.be("Indefinido");
                    {
                      let dataCtr = data.limitesPorIdade;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimitePorFaixaEtaria);
                        expect(data.idadeInicial).to.be.a('number');
                        expect(data.idadeInicial).to.be(0);
                        expect(data.idadeFinal).to.be.a('number');
                        expect(data.idadeFinal).to.be(0);
                        expect(data.limite).to.be.a('number');
                        expect(data.limite).to.be(0.0);
                        expect(data.limiteFacultativo1).to.be.a('number');
                        expect(data.limiteFacultativo1).to.be(0.0);
                        expect(data.limiteFacultativo2).to.be.a('number');
                        expect(data.limiteFacultativo2).to.be(0.0);
                      }
                    }
                    {
                      let dataCtr = data.limitesPorRenda;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimitePorFaixaRenda);
                        expect(data.idadeInicial).to.be.a('number');
                        expect(data.idadeInicial).to.be(0);
                        expect(data.idadeFinal).to.be.a('number');
                        expect(data.idadeFinal).to.be(0);
                        expect(data.multiploRenda).to.be.a('number');
                        expect(data.multiploRenda).to.be(0.0);
                      }
                    }
                    {
                      let dataCtr = data.limitesPorProfissoes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimitePorFaixaProfissao);
                        {
                          let dataCtr = data.profissoesEsimId;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('number');
                            expect(data).to.be(0);
                          }
                        }
                        expect(data.limite).to.be.a('number');
                        expect(data.limite).to.be(0.0);
                      }
                    }
                    expect(data.limiteOperacionalCausaId).to.be.a('number');
                    expect(data.limiteOperacionalCausaId).to.be(0);
                  }
                }
              {
                let dataCtr = data.valor.politicasRelacionamento;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioPoliticaRelacionamento);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.modeloRelacionamento).to.be.a('number');
                  expect(data.modeloRelacionamento).to.be(0);
                  expect(data.tipoPerguntaPoliticaRelacionamento).to.be.a('string');
                  expect(data.tipoPerguntaPoliticaRelacionamento).to.be("");
                  expect(data.respostaPergunta).to.be.a('boolean');
                  expect(data.respostaPergunta).to.be(false);
                  expect(data.descricaoTipoPerguntaPoliticaRelacionamento).to.be.a('string');
                  expect(data.descricaoTipoPerguntaPoliticaRelacionamento).to.be("");
                }
              }
              {
                let dataCtr = data.valor.modelosProposta;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiversionmodeloNegociomodeloNegociocnpjcnpjGET', function() {
        it('should call apiversionmodeloNegociomodeloNegociocnpjcnpjGET successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionmodeloNegociomodeloNegociocnpjcnpjGET call and complete the assertions
          /*
          var version = "version_example";
          var authorization = "authorization_example";
          var opts = {};
          opts.cnpj = "cnpj_example";
          opts.modeloNegocioCodigoModeloNegocio = 56;
          opts.modeloNegocioNome = "modeloNegocioNome_example";
          opts.modeloNegocioIdParceiro = 56;

          instance.apiversionmodeloNegociomodeloNegociocnpjcnpjGET(version, authorization, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestSystemLinqIQueryableAPISeguradoraContratoV1ModeloNegocioModeloNegocio);
            {
              let dataCtr = data.valor;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioModeloNegocio);
                expect(data.modeloRelacionamento).to.be.a('number');
                expect(data.modeloRelacionamento).to.be(0);
                expect(data.nome).to.be.a('string');
                expect(data.nome).to.be("");
                expect(data.status).to.be.a('number');
                expect(data.status).to.be(0);
                expect(data.tipo).to.be.a('number');
                expect(data.tipo).to.be(0);
                expect(data.pessoaIdParceiro).to.be.a('number');
                expect(data.pessoaIdParceiro).to.be(0);
                expect(data.observacao).to.be.a('string');
                expect(data.observacao).to.be("");
                expect(data.dataCriacao).to.be.a(Date);
                expect(data.dataCriacao).to.be(new Date());
                expect(data.dataInativacao).to.be.a(Date);
                expect(data.dataInativacao).to.be(new Date());
                expect(data.cnpjParceiro).to.be.a('number');
                expect(data.cnpjParceiro).to.be("0");
                expect(data.nomeEmpresaModeloNegocio).to.be.a('string');
                expect(data.nomeEmpresaModeloNegocio).to.be("");
                {
                  let dataCtr = data.teleUnderWriting;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTeleUnderWriting);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.empresaTeleUnderWriting).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioEmpresaTeleunderwriting);
                          expect(data.empresaTeleUnderWriting.id).to.be.a('number');
                      expect(data.empresaTeleUnderWriting.id).to.be(0);
                      expect(data.empresaTeleUnderWriting.empresaTeleUnderWritingPessoaId).to.be.a('number');
                      expect(data.empresaTeleUnderWriting.empresaTeleUnderWritingPessoaId).to.be(0);
                      expect(data.empresaTeleUnderWriting.nomeEmpresa).to.be.a('string');
                      expect(data.empresaTeleUnderWriting.nomeEmpresa).to.be("");
                      expect(data.empresaTeleUnderWriting.codigoEmpresa).to.be.a('string');
                      expect(data.empresaTeleUnderWriting.codigoEmpresa).to.be("");
                    expect(data.dataInicioVigencia).to.be.a(Date);
                    expect(data.dataInicioVigencia).to.be(new Date());
                    expect(data.dataFimVigencia).to.be.a(Date);
                    expect(data.dataFimVigencia).to.be(new Date());
                    expect(data.capitalMinimo).to.be.a('number');
                    expect(data.capitalMinimo).to.be(0.0);
                    expect(data.capitalMaximo).to.be.a('number');
                    expect(data.capitalMaximo).to.be(0.0);
                  }
                }
                {
                  let dataCtr = data.produtosNegociados;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProdutoNegociado);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.modeloRelacionamentoProdutoId).to.be.a('number');
                    expect(data.modeloRelacionamentoProdutoId).to.be(0);
                    expect(data.sigla).to.be.a('string');
                    expect(data.sigla).to.be("");
                    expect(data.nome).to.be.a('string');
                    expect(data.nome).to.be("");
                    expect(data.nomeFantasia).to.be.a('string');
                    expect(data.nomeFantasia).to.be("");
                    expect(data.status).to.be.a('number');
                    expect(data.status).to.be(0);
                    expect(data.contratacaoObrigatoria).to.be.a('boolean');
                    expect(data.contratacaoObrigatoria).to.be(false);
                    expect(data.regraCobrancaId).to.be.a('number');
                    expect(data.regraCobrancaId).to.be(0);
                    expect(data.tipoProponente).to.be.a('number');
                    expect(data.tipoProponente).to.be(0);
                    expect(data.permiteAjuste).to.be.a('boolean');
                    expect(data.permiteAjuste).to.be(false);
                    expect(data.permiteReativacao).to.be.a('boolean');
                    expect(data.permiteReativacao).to.be(false);
                    expect(data.permiteReducao).to.be.a('boolean');
                    expect(data.permiteReducao).to.be(false);
                    expect(data.carteira).to.be.a('number');
                    expect(data.carteira).to.be(0);
                    expect(data.taxaDeRentabilidade).to.be.a('number');
                    expect(data.taxaDeRentabilidade).to.be(0.0);
                    {
                      let dataCtr = data.tiposDeRelacionamento;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    {
                      let dataCtr = data.dependencias;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoDependenciaProduto);
                        expect(data.produtoId).to.be.a('number');
                        expect(data.produtoId).to.be(0);
                        expect(data.tipo).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoTipoDependenciaProduto);
                              expect(data.tipo.id).to.be.a('number');
                          expect(data.tipo.id).to.be(0);
                          expect(data.tipo.descricao).to.be.a('string');
                          expect(data.tipo.descricao).to.be("");
                          expect(data.tipo.sigla).to.be.a('string');
                          expect(data.tipo.sigla).to.be("");
                      }
                    }
                    expect(data.regraCobranca).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCobranca);
                          expect(data.regraCobranca.id).to.be.a('number');
                      expect(data.regraCobranca.id).to.be(0);
                      expect(data.regraCobranca.tipoAgrupamentoId).to.be.a('number');
                      expect(data.regraCobranca.tipoAgrupamentoId).to.be(0);
                      expect(data.regraCobranca.permiteAgrupamento).to.be.a('boolean');
                      expect(data.regraCobranca.permiteAgrupamento).to.be(false);
                      expect(data.regraCobranca.cobrancaEmitidaMongeral).to.be.a('boolean');
                      expect(data.regraCobranca.cobrancaEmitidaMongeral).to.be(false);
                      expect(data.regraCobranca.emiteContribuicaoAntecipada).to.be.a('boolean');
                      expect(data.regraCobranca.emiteContribuicaoAntecipada).to.be(false);
                      expect(data.regraCobranca.quantidadeDeMesesDaContribuicaoAntecipada).to.be.a('number');
                      expect(data.regraCobranca.quantidadeDeMesesDaContribuicaoAntecipada).to.be(0);
                      {
                        let dataCtr = data.regraCobranca.diasVencimento;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.regraCobranca.periodicidades;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      {
                        let dataCtr = data.regraCobranca.formasDeCobranca;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFormaCobrancaProduto);
                          expect(data.formaCobranca).to.be.a('string');
                          expect(data.formaCobranca).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.regraCobranca.conveniosAceitos;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioConvenioAceito);
                          expect(data.convenioId).to.be.a('number');
                          expect(data.convenioId).to.be(0);
                          expect(data.ehDefault).to.be.a('boolean');
                          expect(data.ehDefault).to.be(false);
                          expect(data.numeroBanco).to.be.a('number');
                          expect(data.numeroBanco).to.be(0);
                          expect(data.formaCobrancaId).to.be.a('number');
                          expect(data.formaCobrancaId).to.be(0);
                        }
                      }
                    {
                      let dataCtr = data.coberturas;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCoberturaProdutoNegociado);
                        expect(data.modeloRelacionamentoItemProdutoId).to.be.a('number');
                        expect(data.modeloRelacionamentoItemProdutoId).to.be(0);
                        expect(data.modeloRelacionamentoProdutoId).to.be.a('number');
                        expect(data.modeloRelacionamentoProdutoId).to.be(0);
                        expect(data.produtoId).to.be.a('number');
                        expect(data.produtoId).to.be(0);
                        expect(data.itemProdutoId).to.be.a('number');
                        expect(data.itemProdutoId).to.be(0);
                        expect(data.sigla).to.be.a('string');
                        expect(data.sigla).to.be("");
                        expect(data.nome).to.be.a('string');
                        expect(data.nome).to.be("");
                        expect(data.numeroProcessoSusep).to.be.a('string');
                        expect(data.numeroProcessoSusep).to.be("");
                        expect(data.nomeFantasia).to.be.a('string');
                        expect(data.nomeFantasia).to.be("");
                        expect(data.tipo).to.be.a('number');
                        expect(data.tipo).to.be(0);
                        expect(data.grupoApolice).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioGrupoApolice);
                              expect(data.grupoApolice.id).to.be.a('string');
                          expect(data.grupoApolice.id).to.be("");
                          expect(data.grupoApolice.descricao).to.be.a('string');
                          expect(data.grupoApolice.descricao).to.be("");
                          expect(data.grupoApolice.sigla).to.be.a('string');
                          expect(data.grupoApolice.sigla).to.be("");
                        expect(data.valorMaximoCapital).to.be.a('number');
                        expect(data.valorMaximoCapital).to.be(0.0);
                        expect(data.tipoRelacaoSegurado).to.be.a('number');
                        expect(data.tipoRelacaoSegurado).to.be(0);
                        expect(data.codigoPlanoSysPrev).to.be.a('number');
                        expect(data.codigoPlanoSysPrev).to.be(0);
                        expect(data.codigoBeneficioSysPrev).to.be.a('number');
                        expect(data.codigoBeneficioSysPrev).to.be(0);
                        expect(data.idNegociacaoSysPrev).to.be.a('number');
                        expect(data.idNegociacaoSysPrev).to.be(0);
                        expect(data.utilizaClasseDeRiscoNaContratacao).to.be.a('boolean');
                        expect(data.utilizaClasseDeRiscoNaContratacao).to.be(false);
                        {
                          let dataCtr = data.beneficiariosPossiveis;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('number');
                            expect(data).to.be(0);
                          }
                        }
                        {
                          let dataCtr = data.prazoDeCobertura;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('number');
                            expect(data).to.be(0);
                          }
                        }
                        {
                          let dataCtr = data.dependencias;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoDependenciaCoberturaProduto);
                            expect(data.itemProdutoId).to.be.a('number');
                            expect(data.itemProdutoId).to.be(0);
                            expect(data.tipo).to.be.a('number');
                            expect(data.tipo).to.be(0);
                            expect(data.percentualMinimoReferencia).to.be.a('number');
                            expect(data.percentualMinimoReferencia).to.be(0.0);
                            expect(data.percentualMaximoReferencia).to.be.a('number');
                            expect(data.percentualMaximoReferencia).to.be(0.0);
                          }
                        }
                        {
                          let dataCtr = data.formasContratacao;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFormaContratacao);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.descricao).to.be.a('string');
                            expect(data.descricao).to.be("");
                          }
                        }
                        expect(data.possuiIof).to.be.a('boolean');
                        expect(data.possuiIof).to.be(false);
                        expect(data.indiceContribuicaoId).to.be.a('number');
                        expect(data.indiceContribuicaoId).to.be(0);
                        expect(data.indiceBeneficioId).to.be.a('number');
                        expect(data.indiceBeneficioId).to.be(0);
                        {
                          let dataCtr = data.rendas;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRenda);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.tipo).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoRenda);
                                  expect(data.tipo.id).to.be.a('string');
                              expect(data.tipo.id).to.be("");
                              expect(data.tipo.descricao).to.be.a('string');
                              expect(data.tipo.descricao).to.be("");
                              expect(data.tipo.sigla).to.be.a('string');
                              expect(data.tipo.sigla).to.be("");
                            expect(data.ehPadrao).to.be.a('boolean');
                            expect(data.ehPadrao).to.be(false);
                            expect(data.prazoInicial).to.be.a('number');
                            expect(data.prazoInicial).to.be(0);
                            expect(data.prazoFinal).to.be.a('number');
                            expect(data.prazoFinal).to.be(0);
                            expect(data.prazoPadrao).to.be.a('number');
                            expect(data.prazoPadrao).to.be(0);
                            expect(data.idadeMaioridade).to.be.a('number');
                            expect(data.idadeMaioridade).to.be(0);
                          }
                        }
                        expect(data.codigoServicoPrestadora).to.be.a('string');
                        expect(data.codigoServicoPrestadora).to.be("");
                        expect(data.tipoServico).to.be.a('number');
                        expect(data.tipoServico).to.be(0);
                        expect(data.nomeServico).to.be.a('string');
                        expect(data.nomeServico).to.be("");
                        expect(data.versao).to.be.a('string');
                        expect(data.versao).to.be("");
                        {
                          let dataCtr = data.valoresRepassadoAoCliente;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioValorRepassadoAoCliente);
                            expect(data.valor).to.be.a('number');
                            expect(data.valor).to.be(0.0);
                            expect(data.idadeInicial).to.be.a('number');
                            expect(data.idadeInicial).to.be(0);
                            expect(data.idadeFinal).to.be.a('number');
                            expect(data.idadeFinal).to.be(0);
                            expect(data.tipoRepasseCliente).to.be.a('string');
                            expect(data.tipoRepasseCliente).to.be("NaoInformado");
                          }
                        }
                        {
                          let dataCtr = data.fundos;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoFundo);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.cnpj).to.be.a('string');
                            expect(data.cnpj).to.be("");
                            expect(data.sigla).to.be.a('string');
                            expect(data.sigla).to.be("");
                            expect(data.nomeFantasia).to.be.a('string');
                            expect(data.nomeFantasia).to.be("");
                            expect(data.percentualRendaVariavel).to.be.a('number');
                            expect(data.percentualRendaVariavel).to.be(0.0);
                          }
                        }
                        expect(data.valorMinimoContribuicaoMensal).to.be.a('number');
                        expect(data.valorMinimoContribuicaoMensal).to.be(0.0);
                        expect(data.valorMinimoContribuicaoMensalComAporteUnico).to.be.a('number');
                        expect(data.valorMinimoContribuicaoMensalComAporteUnico).to.be(0.0);
                        expect(data.valorMinimoPortabilidadeEntrada).to.be.a('number');
                        expect(data.valorMinimoPortabilidadeEntrada).to.be(0.0);
                        expect(data.valorMaximoPortabilidadeEntrada).to.be.a('number');
                        expect(data.valorMaximoPortabilidadeEntrada).to.be(0.0);
                        expect(data.valorMinimoPortabilidadeSaida).to.be.a('number');
                        expect(data.valorMinimoPortabilidadeSaida).to.be(0.0);
                        expect(data.valorMinimoAporte).to.be.a('number');
                        expect(data.valorMinimoAporte).to.be(0.0);
                        expect(data.valorMaximoAporte).to.be.a('number');
                        expect(data.valorMaximoAporte).to.be(0.0);
                        expect(data.valorMinimoAporteUnico).to.be.a('number');
                        expect(data.valorMinimoAporteUnico).to.be(0.0);
                        expect(data.valorMaximoAporteUnico).to.be.a('number');
                        expect(data.valorMaximoAporteUnico).to.be(0.0);
                        expect(data.valorMinimoSaldo).to.be.a('number');
                        expect(data.valorMinimoSaldo).to.be(0.0);
                        expect(data.valorMaximoSaldo).to.be.a('number');
                        expect(data.valorMaximoSaldo).to.be(0.0);
                        expect(data.valorMinimoResgate).to.be.a('number');
                        expect(data.valorMinimoResgate).to.be(0.0);
                        expect(data.quantidadeMinimaContribuicao).to.be.a('number');
                        expect(data.quantidadeMinimaContribuicao).to.be(0);
                        expect(data.intervaloEntreAportesMeses).to.be.a('number');
                        expect(data.intervaloEntreAportesMeses).to.be(0);
                        expect(data.limitePrazoDiferimentoAnos).to.be.a('number');
                        expect(data.limitePrazoDiferimentoAnos).to.be(0);
                        expect(data.idadeMinima).to.be.a('number');
                        expect(data.idadeMinima).to.be(0);
                        expect(data.idadeMaxima).to.be.a('number');
                        expect(data.idadeMaxima).to.be(0);
                        expect(data.prazoMinimoDiferimento).to.be.a('number');
                        expect(data.prazoMinimoDiferimento).to.be(0);
                        expect(data.prazoMaximoDiferimento).to.be.a('number');
                        expect(data.prazoMaximoDiferimento).to.be(0);
                        expect(data.idadeLimiteAposentadoria).to.be.a('number');
                        expect(data.idadeLimiteAposentadoria).to.be(0);
                        expect(data.coberturaId).to.be.a('number');
                        expect(data.coberturaId).to.be(0);
                        {
                          let dataCtr = data.classesDeRisco;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioClasseRisco);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.sigla).to.be.a('string');
                            expect(data.sigla).to.be("");
                            expect(data.descricao).to.be.a('string');
                            expect(data.descricao).to.be("");
                            expect(data.prazoCobertura).to.be.a('number');
                            expect(data.prazoCobertura).to.be(0);
                            expect(data.fumante).to.be.a('boolean');
                            expect(data.fumante).to.be(false);
                            {
                              let dataCtr = data.profissoes;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProfissao);
                                expect(data.id).to.be.a('number');
                                expect(data.id).to.be(0);
                                expect(data.cbo).to.be.a('string');
                                expect(data.cbo).to.be("");
                                expect(data.descricao).to.be.a('string');
                                expect(data.descricao).to.be("");
                              }
                            }
                          }
                        }
                        expect(data.possuiDependenciaDeImplantacao).to.be.a('boolean');
                        expect(data.possuiDependenciaDeImplantacao).to.be(false);
                        expect(data.possuiDependenciaDeCancelamento).to.be.a('boolean');
                        expect(data.possuiDependenciaDeCancelamento).to.be(false);
                        expect(data.ehServico).to.be.a('boolean');
                        expect(data.ehServico).to.be(false);
                        expect(data.ehSobrevivencia).to.be.a('boolean');
                        expect(data.ehSobrevivencia).to.be(false);
                        expect(data.ehAposentadoria).to.be.a('boolean');
                        expect(data.ehAposentadoria).to.be(false);
                        expect(data.ehFundoAcumulacao).to.be.a('boolean');
                        expect(data.ehFundoAcumulacao).to.be(false);
                        {
                          let dataCtr = data.profissoesRecusadasIds;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('number');
                            expect(data).to.be(0);
                          }
                        }
                        expect(data.segmentoNegocio).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioSegmentoNegocio);
                              expect(data.segmentoNegocio.id).to.be.a('string');
                          expect(data.segmentoNegocio.id).to.be("");
                          expect(data.segmentoNegocio.descricao).to.be.a('string');
                          expect(data.segmentoNegocio.descricao).to.be("");
                          expect(data.segmentoNegocio.sigla).to.be.a('string');
                          expect(data.segmentoNegocio.sigla).to.be("");
                        expect(data.ehRisco).to.be.a('boolean');
                        expect(data.ehRisco).to.be(false);
                        expect(data.dataInicioContratoServico).to.be.a(Date);
                        expect(data.dataInicioContratoServico).to.be(new Date());
                        expect(data.dataFimContratoServico).to.be.a(Date);
                        expect(data.dataFimContratoServico).to.be(new Date());
                        expect(data.prestadorServicoPessoaId).to.be.a('number');
                        expect(data.prestadorServicoPessoaId).to.be(0);
                        expect(data.nomeClasseRiscoPadrao).to.be.a('string');
                        expect(data.nomeClasseRiscoPadrao).to.be("");
                        expect(data.classeDeRiscoPadraoParaContratacao).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioClasseRisco);
                              expect(data.classeDeRiscoPadraoParaContratacao.id).to.be.a('number');
                          expect(data.classeDeRiscoPadraoParaContratacao.id).to.be(0);
                          expect(data.classeDeRiscoPadraoParaContratacao.sigla).to.be.a('string');
                          expect(data.classeDeRiscoPadraoParaContratacao.sigla).to.be("");
                          expect(data.classeDeRiscoPadraoParaContratacao.descricao).to.be.a('string');
                          expect(data.classeDeRiscoPadraoParaContratacao.descricao).to.be("");
                          expect(data.classeDeRiscoPadraoParaContratacao.prazoCobertura).to.be.a('number');
                          expect(data.classeDeRiscoPadraoParaContratacao.prazoCobertura).to.be(0);
                          expect(data.classeDeRiscoPadraoParaContratacao.fumante).to.be.a('boolean');
                          expect(data.classeDeRiscoPadraoParaContratacao.fumante).to.be(false);
                          {
                            let dataCtr = data.classeDeRiscoPadraoParaContratacao.profissoes;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProfissao);
                              expect(data.id).to.be.a('number');
                              expect(data.id).to.be(0);
                              expect(data.cbo).to.be.a('string');
                              expect(data.cbo).to.be("");
                              expect(data.descricao).to.be.a('string');
                              expect(data.descricao).to.be("");
                            }
                          }
                        expect(data.tipoContaCorporateId).to.be.a('number');
                        expect(data.tipoContaCorporateId).to.be(0);
                        expect(data.numeroApoliceVidaEmGrupoAngariadoIndividual).to.be.a('string');
                        expect(data.numeroApoliceVidaEmGrupoAngariadoIndividual).to.be("");
                        expect(data.ehPensao).to.be.a('boolean');
                        expect(data.ehPensao).to.be(false);
                        expect(data.vigenteParaComercializacao).to.be.a('boolean');
                        expect(data.vigenteParaComercializacao).to.be(false);
                        expect(data.apoliceAngariadaIndividualmente).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioApoliceAngariadaIndividualmente);
                              expect(data.apoliceAngariadaIndividualmente.numero).to.be.a('string');
                          expect(data.apoliceAngariadaIndividualmente.numero).to.be("");
                          expect(data.apoliceAngariadaIndividualmente.estipulantePessoaId).to.be.a('number');
                          expect(data.apoliceAngariadaIndividualmente.estipulantePessoaId).to.be(0);
                          expect(data.apoliceAngariadaIndividualmente.dataInicio).to.be.a(Date);
                          expect(data.apoliceAngariadaIndividualmente.dataInicio).to.be(new Date());
                          expect(data.apoliceAngariadaIndividualmente.dataFim).to.be.a(Date);
                          expect(data.apoliceAngariadaIndividualmente.dataFim).to.be(new Date());
                        expect(data.exigeDps).to.be.a('boolean');
                        expect(data.exigeDps).to.be(false);
                        expect(data.idadeExclusao).to.be.a('number');
                        expect(data.idadeExclusao).to.be(0);
                        expect(data.processoSusepHistorico).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioProcessoSusepHistorico);
                              expect(data.processoSusepHistorico.numeroProcesso).to.be.a('string');
                          expect(data.processoSusepHistorico.numeroProcesso).to.be("");
                          expect(data.processoSusepHistorico.complementoNumeroProcesso).to.be.a('string');
                          expect(data.processoSusepHistorico.complementoNumeroProcesso).to.be("");
                          expect(data.processoSusepHistorico.reajusteAutomatico).to.be.a('boolean');
                          expect(data.processoSusepHistorico.reajusteAutomatico).to.be(false);
                          expect(data.processoSusepHistorico.cancelaAutomatico).to.be.a('boolean');
                          expect(data.processoSusepHistorico.cancelaAutomatico).to.be(false);
                          expect(data.processoSusepHistorico.vigenciaVitalicia).to.be.a('boolean');
                          expect(data.processoSusepHistorico.vigenciaVitalicia).to.be(false);
                          expect(data.processoSusepHistorico.vigenciaRenovavelAutomaticamente).to.be.a('boolean');
                          expect(data.processoSusepHistorico.vigenciaRenovavelAutomaticamente).to.be(false);
                          expect(data.processoSusepHistorico.quantidadeRenovacoesAutomaticas).to.be.a('number');
                          expect(data.processoSusepHistorico.quantidadeRenovacoesAutomaticas).to.be(0);
                          expect(data.processoSusepHistorico.vigenciaMesesRenovacoesAutomaticas).to.be.a('number');
                          expect(data.processoSusepHistorico.vigenciaMesesRenovacoesAutomaticas).to.be(0);
                          expect(data.processoSusepHistorico.vigenciaMesesRenovacoesNaoAutomaticas).to.be.a('number');
                          expect(data.processoSusepHistorico.vigenciaMesesRenovacoesNaoAutomaticas).to.be(0);
                          expect(data.processoSusepHistorico.vigenciaIndependenteEntreCoberturas).to.be.a('boolean');
                          expect(data.processoSusepHistorico.vigenciaIndependenteEntreCoberturas).to.be(false);
                          expect(data.processoSusepHistorico.permiteRenovacao).to.be.a('boolean');
                          expect(data.processoSusepHistorico.permiteRenovacao).to.be(false);
                          expect(data.processoSusepHistorico.reenquadramentoAutomatico).to.be.a('boolean');
                          expect(data.processoSusepHistorico.reenquadramentoAutomatico).to.be(false);
                        expect(data.coberturaSusep).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCoberturaSusep);
                              expect(data.coberturaSusep.id).to.be.a('number');
                          expect(data.coberturaSusep.id).to.be(0);
                          expect(data.coberturaSusep.sigla).to.be.a('string');
                          expect(data.coberturaSusep.sigla).to.be("");
                          expect(data.coberturaSusep.descricao).to.be.a('string');
                          expect(data.coberturaSusep.descricao).to.be("");
                          expect(data.coberturaSusep.tipoCoberturaProvisaoId).to.be.a('number');
                          expect(data.coberturaSusep.tipoCoberturaProvisaoId).to.be(0);
                        {
                          let dataCtr = data.pagamentosAntecipadosEmAnos;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('number');
                            expect(data).to.be(0);
                          }
                        }
                        {
                          let dataCtr = data.itensDeServico;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServico);
                            expect(data.tipoServico).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoServico);
                                  expect(data.tipoServico.id).to.be.a('string');
                              expect(data.tipoServico.id).to.be("");
                              expect(data.tipoServico.descricao).to.be.a('string');
                              expect(data.tipoServico.descricao).to.be("");
                              expect(data.tipoServico.sigla).to.be.a('string');
                              expect(data.tipoServico.sigla).to.be("");
                            expect(data.servicoId).to.be.a('number');
                            expect(data.servicoId).to.be(0);
                            expect(data.itemServicoId).to.be.a('number');
                            expect(data.itemServicoId).to.be(0);
                            expect(data.descricao).to.be.a('string');
                            expect(data.descricao).to.be("");
                            expect(data.nome).to.be.a('string');
                            expect(data.nome).to.be("");
                            expect(data.sigla).to.be.a('string');
                            expect(data.sigla).to.be("");
                            expect(data.assitencialCondicionado).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoAssitencialCondicionado);
                                  expect(data.assitencialCondicionado.valorMinimoObterServico).to.be.a('number');
                              expect(data.assitencialCondicionado.valorMinimoObterServico).to.be(0.0);
                              expect(data.assitencialCondicionado.idadeMinima).to.be.a('number');
                              expect(data.assitencialCondicionado.idadeMinima).to.be(0);
                              expect(data.assitencialCondicionado.idadeMaxima).to.be.a('number');
                              expect(data.assitencialCondicionado.idadeMaxima).to.be(0);
                              expect(data.assitencialCondicionado.produtoId).to.be.a('number');
                              expect(data.assitencialCondicionado.produtoId).to.be(0);
                              expect(data.assitencialCondicionado.sexoId).to.be.a('string');
                              expect(data.assitencialCondicionado.sexoId).to.be("");
                            expect(data.cestaBasica).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoCestaBasica);
                                  expect(data.cestaBasica.periodo).to.be.a('number');
                              expect(data.cestaBasica.periodo).to.be(0);
                              expect(data.cestaBasica.valorCesta).to.be.a('number');
                              expect(data.cestaBasica.valorCesta).to.be(0.0);
                              expect(data.cestaBasica.periodicidadeId).to.be.a('number');
                              expect(data.cestaBasica.periodicidadeId).to.be(0);
                            expect(data.sorteio).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoSorteio);
                                  expect(data.sorteio.periodicidadeId).to.be.a('number');
                              expect(data.sorteio.periodicidadeId).to.be(0);
                              expect(data.sorteio.centenaMilhar).to.be.a('number');
                              expect(data.sorteio.centenaMilhar).to.be(0.0);
                              expect(data.sorteio.dezenaMilhar).to.be.a('number');
                              expect(data.sorteio.dezenaMilhar).to.be(0.0);
                              expect(data.sorteio.milhar).to.be.a('number');
                              expect(data.sorteio.milhar).to.be(0.0);
                              expect(data.sorteio.centena).to.be.a('number');
                              expect(data.sorteio.centena).to.be(0.0);
                              expect(data.sorteio.dezena).to.be.a('number');
                              expect(data.sorteio.dezena).to.be(0.0);
                              expect(data.sorteio.quotaCapitalizacao).to.be.a('number');
                              expect(data.sorteio.quotaCapitalizacao).to.be(0.0);
                              expect(data.sorteio.quotaSorteio).to.be.a('number');
                              expect(data.sorteio.quotaSorteio).to.be(0.0);
                              expect(data.sorteio.taxaJuros).to.be.a('number');
                              expect(data.sorteio.taxaJuros).to.be(0.0);
                              expect(data.sorteio.qtdeSorteioMes).to.be.a('number');
                              expect(data.sorteio.qtdeSorteioMes).to.be(0);
                              expect(data.sorteio.valorSorteio).to.be.a('number');
                              expect(data.sorteio.valorSorteio).to.be(0.0);
                              expect(data.sorteio.valorLimiteInferiorSorteio).to.be.a('number');
                              expect(data.sorteio.valorLimiteInferiorSorteio).to.be(0.0);
                              expect(data.sorteio.valorLimiteSuperiorSorteio).to.be.a('number');
                              expect(data.sorteio.valorLimiteSuperiorSorteio).to.be(0.0);
                              expect(data.sorteio.percentualCapital).to.be.a('number');
                              expect(data.sorteio.percentualCapital).to.be(0.0);
                              expect(data.sorteio.fatorContribuicaoCobertura).to.be.a('number');
                              expect(data.sorteio.fatorContribuicaoCobertura).to.be(0.0);
                              expect(data.sorteio.numeroProcessoSorteio).to.be.a('string');
                              expect(data.sorteio.numeroProcessoSorteio).to.be("");
                              expect(data.sorteio.tipoLayoutArquivoSorteioId).to.be.a('number');
                              expect(data.sorteio.tipoLayoutArquivoSorteioId).to.be(0);
                            expect(data.safAFFamiliar).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoSAF);
                                  expect(data.safAFFamiliar.valorGarantido).to.be.a('number');
                              expect(data.safAFFamiliar.valorGarantido).to.be(0.0);
                            expect(data.safIndividual).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioItemServicoSAF);
                                  expect(data.safIndividual.valorGarantido).to.be.a('number');
                              expect(data.safIndividual.valorGarantido).to.be(0.0);
                          }
                        }
                        expect(data.exibeServicoNaListaDeCobertura).to.be.a('boolean');
                        expect(data.exibeServicoNaListaDeCobertura).to.be(false);
                        expect(data.valorServicoSomadoNaCoberturaDeReferencia).to.be.a('boolean');
                        expect(data.valorServicoSomadoNaCoberturaDeReferencia).to.be(false);
                        expect(data.franquia).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFranquia);
                              expect(data.franquia.diasFranquia).to.be.a('number');
                          expect(data.franquia.diasFranquia).to.be(0);
                          expect(data.franquia.maximoDiariasPorEvento).to.be.a('number');
                          expect(data.franquia.maximoDiariasPorEvento).to.be(0);
                          expect(data.franquia.limiteDiarias).to.be.a('number');
                          expect(data.franquia.limiteDiarias).to.be(0);
                        {
                          let dataCtr = data.regrasCarenciaBeneficio;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCarenciaBeneficio);
                            expect(data.tipoId).to.be.a('number');
                            expect(data.tipoId).to.be(0);
                            expect(data.anulaCarenciaComDps).to.be.a('boolean');
                            expect(data.anulaCarenciaComDps).to.be(false);
                            expect(data.quantidade).to.be.a('number');
                            expect(data.quantidade).to.be(0);
                            {
                              let dataCtr = data.progressivo;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioBeneficioProgressivo);
                                expect(data.percentual).to.be.a('number');
                                expect(data.percentual).to.be(0.0);
                                expect(data.inicial).to.be.a('number');
                                expect(data.inicial).to.be(0);
                                expect(data._final).to.be.a('number');
                                expect(data._final).to.be(0);
                              }
                            }
                            expect(data.tipoCarenciaBeneficio).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoCarenciaBeneficio);
                                  expect(data.tipoCarenciaBeneficio.id).to.be.a('string');
                              expect(data.tipoCarenciaBeneficio.id).to.be("");
                              expect(data.tipoCarenciaBeneficio.descricao).to.be.a('string');
                              expect(data.tipoCarenciaBeneficio.descricao).to.be("");
                              expect(data.tipoCarenciaBeneficio.sigla).to.be.a('string');
                              expect(data.tipoCarenciaBeneficio.sigla).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.regrasCarenciaProgressivaPorCausa;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCarenciaProgressivaPorCausa);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.inicial).to.be.a('number');
                            expect(data.inicial).to.be(0);
                            expect(data._final).to.be.a('number');
                            expect(data._final).to.be(0);
                            expect(data.percentualBeneficio).to.be.a('number');
                            expect(data.percentualBeneficio).to.be(0.0);
                            expect(data.causaFatorGerador).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioCausaFatoGerador);
                                  expect(data.causaFatorGerador.id).to.be.a('number');
                              expect(data.causaFatorGerador.id).to.be(0);
                              expect(data.causaFatorGerador.descricao).to.be.a('string');
                              expect(data.causaFatorGerador.descricao).to.be("");
                              expect(data.causaFatorGerador.subGrupoCausaFatoGerador).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioSubGrupoCausaFatoGerador);
                                    expect(data.causaFatorGerador.subGrupoCausaFatoGerador.id).to.be.a('number');
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.id).to.be(0);
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioGrupoCausaFatoGerador);
                                      expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.id).to.be.a('number');
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.id).to.be(0);
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.descricao).to.be.a('string');
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.primario.descricao).to.be("");
                                expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioGrupoCausaFatoGerador);
                                      expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.id).to.be.a('number');
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.id).to.be(0);
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.descricao).to.be.a('string');
                                  expect(data.causaFatorGerador.subGrupoCausaFatoGerador.secundario.descricao).to.be("");
                            expect(data.coberturaProcessoHistoricoId).to.be.a('number');
                            expect(data.coberturaProcessoHistoricoId).to.be(0);
                          }
                        }
                        {
                          let dataCtr = data.doencasGraves;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioDoencasGraves);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.sigla).to.be.a('string');
                            expect(data.sigla).to.be("");
                            expect(data.descricao).to.be.a('string');
                            expect(data.descricao).to.be("");
                            expect(data.ordemApresentacao).to.be.a('number');
                            expect(data.ordemApresentacao).to.be(0);
                            expect(data.excluido).to.be.a('number');
                            expect(data.excluido).to.be(0);
                            expect(data.itemProdutoId).to.be.a('number');
                            expect(data.itemProdutoId).to.be(0);
                          }
                        }
                        {
                          let dataCtr = data.decrescimoContribuicao;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioDecrescimoContribuicao);
                            expect(data.ano).to.be.a('number');
                            expect(data.ano).to.be(0);
                            expect(data.prazo).to.be.a('number');
                            expect(data.prazo).to.be(0);
                            expect(data.percentual).to.be.a('number');
                            expect(data.percentual).to.be(0.0);
                          }
                        }
                        {
                          let dataCtr = data.formulaProlongamento;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioFormulaProlongamento);
                            expect(data.id).to.be.a('number');
                            expect(data.id).to.be(0);
                            expect(data.sigla).to.be.a('string');
                            expect(data.sigla).to.be("");
                            expect(data.descricao).to.be.a('string');
                            expect(data.descricao).to.be("");
                            expect(data.ordemApresentacao).to.be.a('number');
                            expect(data.ordemApresentacao).to.be(0);
                            expect(data.excluido).to.be.a('boolean');
                            expect(data.excluido).to.be(false);
                            expect(data.nomeArquivo).to.be.a('string');
                            expect(data.nomeArquivo).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.adiantamentoContribuicao;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioAdiantamentoContribuicao);
                            {
                              let dataCtr = data.prazo;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a('number');
                                expect(data).to.be(0);
                              }
                            }
                            {
                              let dataCtr = data.idade;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a('number');
                                expect(data).to.be(0);
                              }
                            }
                          }
                        }
                        expect(data.possuiDecrescimo).to.be.a('boolean');
                        expect(data.possuiDecrescimo).to.be(false);
                        expect(data.permiteResgateParcial).to.be.a('boolean');
                        expect(data.permiteResgateParcial).to.be(false);
                        expect(data.itemProdutoObrigatorio).to.be.a('boolean');
                        expect(data.itemProdutoObrigatorio).to.be(false);
                        expect(data.taxaFixa).to.be.a('boolean');
                        expect(data.taxaFixa).to.be(false);
                        expect(data.valorCapitalFixo).to.be.a('number');
                        expect(data.valorCapitalFixo).to.be(0.0);
                        expect(data.descricaoComercial).to.be.a('string');
                        expect(data.descricaoComercial).to.be("");
                        {
                          let dataCtr = data.uFsRecusadasIds;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.possuiDependenciaDeContratacaoExclusiva).to.be.a('boolean');
                        expect(data.possuiDependenciaDeContratacaoExclusiva).to.be(false);
                        {
                          let dataCtr = data.regrasCarenciaResgate;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioRegraCarenciaResgate);
                            expect(data.quantidade).to.be.a('number');
                            expect(data.quantidade).to.be(0);
                            {
                              let dataCtr = data.progressivo;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioResgateCarenciaProgressivo);
                                expect(data.percentual).to.be.a('number');
                                expect(data.percentual).to.be(0.0);
                                expect(data.inicial).to.be.a('number');
                                expect(data.inicial).to.be(0);
                                expect(data._final).to.be.a('number');
                                expect(data._final).to.be(0);
                              }
                            }
                            expect(data.tipoCarenciaResgate).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioTipoCarenciaResgate);
                                  expect(data.tipoCarenciaResgate.id).to.be.a('string');
                              expect(data.tipoCarenciaResgate.id).to.be("");
                              expect(data.tipoCarenciaResgate.descricao).to.be.a('string');
                              expect(data.tipoCarenciaResgate.descricao).to.be("");
                              expect(data.tipoCarenciaResgate.sigla).to.be.a('string');
                              expect(data.tipoCarenciaResgate.sigla).to.be("");
                          }
                        }
                        expect(data.valorMinimoCapitalContratacao).to.be.a('number');
                        expect(data.valorMinimoCapitalContratacao).to.be(0.0);
                        expect(data.valorLimiteCapitalReferencia).to.be.a('number');
                        expect(data.valorLimiteCapitalReferencia).to.be(0.0);
                      }
                    }
                    expect(data.codigoPlanoSysPrev).to.be.a('number');
                    expect(data.codigoPlanoSysPrev).to.be(0);
                    expect(data.ehComercializado).to.be.a('boolean');
                    expect(data.ehComercializado).to.be(false);
                    expect(data.restricaoSexo).to.be.a('string');
                    expect(data.restricaoSexo).to.be("");
                    expect(data.referenciaCoberturaId).to.be.a('number');
                    expect(data.referenciaCoberturaId).to.be(0);
                    expect(data.produtoPrincipal).to.be.a('boolean');
                    expect(data.produtoPrincipal).to.be(false);
                    {
                      let dataCtr = data.profissoesAceitas;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    expect(data.permiteContratacaoParcial).to.be.a('boolean');
                    expect(data.permiteContratacaoParcial).to.be(false);
                    expect(data.estahRestrito).to.be.a('boolean');
                    expect(data.estahRestrito).to.be(false);
                    expect(data.descricaoComercial).to.be.a('string');
                    expect(data.descricaoComercial).to.be("");
                    expect(data.valorMinimoCapitalContratacao).to.be.a('number');
                    expect(data.valorMinimoCapitalContratacao).to.be(0.0);
                    expect(data.valorLimiteCapitalReferencia).to.be.a('number');
                    expect(data.valorLimiteCapitalReferencia).to.be(0.0);
                  }
                }
                {
                  let dataCtr = data.regrasDependencia;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoDependenciaProduto);
                    expect(data.produtoId).to.be.a('number');
                    expect(data.produtoId).to.be(0);
                    expect(data.tipo).to.be.a(Apiseguradora.APISeguradoraContratoV1ProdutoTipoDependenciaProduto);
                          expect(data.tipo.id).to.be.a('number');
                      expect(data.tipo.id).to.be(0);
                      expect(data.tipo.descricao).to.be.a('string');
                      expect(data.tipo.descricao).to.be("");
                      expect(data.tipo.sigla).to.be.a('string');
                      expect(data.tipo.sigla).to.be("");
                  }
                }
                expect(data.regrasAceitacao).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioPoliticaDeAceitacao);
                      expect(data.regrasAceitacao.codigoModeloProposta).to.be.a('string');
                  expect(data.regrasAceitacao.codigoModeloProposta).to.be("");
                  expect(data.regrasAceitacao.dataVigencia).to.be.a(Date);
                  expect(data.regrasAceitacao.dataVigencia).to.be(new Date());
                  expect(data.regrasAceitacao.statusPoliticaAceitacao).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioStatusPoliticaAceitacao);
                        expect(data.regrasAceitacao.statusPoliticaAceitacao.id).to.be.a('string');
                    expect(data.regrasAceitacao.statusPoliticaAceitacao.id).to.be("");
                    expect(data.regrasAceitacao.statusPoliticaAceitacao.descricao).to.be.a('string');
                    expect(data.regrasAceitacao.statusPoliticaAceitacao.descricao).to.be("");
                    expect(data.regrasAceitacao.statusPoliticaAceitacao.sigla).to.be.a('string');
                    expect(data.regrasAceitacao.statusPoliticaAceitacao.sigla).to.be("");
                  expect(data.regrasAceitacao.descricao).to.be.a('string');
                  expect(data.regrasAceitacao.descricao).to.be("");
                  expect(data.regrasAceitacao.minimoContribuicaoClientesNovos).to.be.a('number');
                  expect(data.regrasAceitacao.minimoContribuicaoClientesNovos).to.be(0.0);
                  expect(data.regrasAceitacao.minimoContribuicaoClientesAntigos).to.be.a('number');
                  expect(data.regrasAceitacao.minimoContribuicaoClientesAntigos).to.be(0.0);
                  expect(data.regrasAceitacao.imcMinimoRecusa).to.be.a('number');
                  expect(data.regrasAceitacao.imcMinimoRecusa).to.be(0.0);
                  expect(data.regrasAceitacao.imcMinimoExame).to.be.a('number');
                  expect(data.regrasAceitacao.imcMinimoExame).to.be(0.0);
                  expect(data.regrasAceitacao.imcMaximoRecusa).to.be.a('number');
                  expect(data.regrasAceitacao.imcMaximoRecusa).to.be(0.0);
                  expect(data.regrasAceitacao.imcMaximoExame).to.be.a('number');
                  expect(data.regrasAceitacao.imcMaximoExame).to.be(0.0);
                  expect(data.regrasAceitacao.qtdeMaximaCigarrosRecusa).to.be.a('number');
                  expect(data.regrasAceitacao.qtdeMaximaCigarrosRecusa).to.be(0);
                  expect(data.regrasAceitacao.qtdeMaximaCigarrosExame).to.be.a('number');
                  expect(data.regrasAceitacao.qtdeMaximaCigarrosExame).to.be(0);
                  expect(data.regrasAceitacao.diasMaximoRecusa).to.be.a('number');
                  expect(data.regrasAceitacao.diasMaximoRecusa).to.be(0);
                  expect(data.regrasAceitacao.mesesEntreSubscricoes).to.be.a('number');
                  expect(data.regrasAceitacao.mesesEntreSubscricoes).to.be(0);
                  expect(data.regrasAceitacao.mesesEntreResgates).to.be.a('number');
                  expect(data.regrasAceitacao.mesesEntreResgates).to.be(0);
                  expect(data.regrasAceitacao.mesesEntreReducoesContribuicao).to.be.a('number');
                  expect(data.regrasAceitacao.mesesEntreReducoesContribuicao).to.be(0);
                  expect(data.regrasAceitacao.valorCapitalAcionarCoaf).to.be.a('number');
                  expect(data.regrasAceitacao.valorCapitalAcionarCoaf).to.be(0.0);
                  expect(data.regrasAceitacao.exigeConfirmacaoVenda).to.be.a('boolean');
                  expect(data.regrasAceitacao.exigeConfirmacaoVenda).to.be(false);
                  expect(data.regrasAceitacao.dataCriacao).to.be.a(Date);
                  expect(data.regrasAceitacao.dataCriacao).to.be(new Date());
                  expect(data.regrasAceitacao.dataInicioVigencia).to.be.a(Date);
                  expect(data.regrasAceitacao.dataInicioVigencia).to.be(new Date());
                  expect(data.regrasAceitacao.dataFimVigencia).to.be.a(Date);
                  expect(data.regrasAceitacao.dataFimVigencia).to.be(new Date());
                  expect(data.regrasAceitacao.mesesEntreCancelamentos).to.be.a('number');
                  expect(data.regrasAceitacao.mesesEntreCancelamentos).to.be(0);
                  {
                    let dataCtr = data.regrasAceitacao.limitesOperacionais;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimiteOperacionalPorFaixa);
                      expect(data.sigla).to.be.a('string');
                      expect(data.sigla).to.be("");
                      expect(data.descricao).to.be.a('string');
                      expect(data.descricao).to.be("");
                      expect(data.nomeTipoLimiteOperacional).to.be.a('string');
                      expect(data.nomeTipoLimiteOperacional).to.be("");
                      expect(data.tipoGrupoCobertura).to.be.a('string');
                      expect(data.tipoGrupoCobertura).to.be("");
                      {
                        let dataCtr = data.coberturasIds;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                      expect(data.tipoLimiteOperacional).to.be.a('string');
                      expect(data.tipoLimiteOperacional).to.be("Indefinido");
                      {
                        let dataCtr = data.limitesPorIdade;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimitePorFaixaEtaria);
                          expect(data.idadeInicial).to.be.a('number');
                          expect(data.idadeInicial).to.be(0);
                          expect(data.idadeFinal).to.be.a('number');
                          expect(data.idadeFinal).to.be(0);
                          expect(data.limite).to.be.a('number');
                          expect(data.limite).to.be(0.0);
                          expect(data.limiteFacultativo1).to.be.a('number');
                          expect(data.limiteFacultativo1).to.be(0.0);
                          expect(data.limiteFacultativo2).to.be.a('number');
                          expect(data.limiteFacultativo2).to.be(0.0);
                        }
                      }
                      {
                        let dataCtr = data.limitesPorRenda;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimitePorFaixaRenda);
                          expect(data.idadeInicial).to.be.a('number');
                          expect(data.idadeInicial).to.be(0);
                          expect(data.idadeFinal).to.be.a('number');
                          expect(data.idadeFinal).to.be(0);
                          expect(data.multiploRenda).to.be.a('number');
                          expect(data.multiploRenda).to.be(0.0);
                        }
                      }
                      {
                        let dataCtr = data.limitesPorProfissoes;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioLimitePorFaixaProfissao);
                          {
                            let dataCtr = data.profissoesEsimId;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('number');
                              expect(data).to.be(0);
                            }
                          }
                          expect(data.limite).to.be.a('number');
                          expect(data.limite).to.be(0.0);
                        }
                      }
                      expect(data.limiteOperacionalCausaId).to.be.a('number');
                      expect(data.limiteOperacionalCausaId).to.be(0);
                    }
                  }
                {
                  let dataCtr = data.politicasRelacionamento;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1ModeloNegocioPoliticaRelacionamento);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.modeloRelacionamento).to.be.a('number');
                    expect(data.modeloRelacionamento).to.be(0);
                    expect(data.tipoPerguntaPoliticaRelacionamento).to.be.a('string');
                    expect(data.tipoPerguntaPoliticaRelacionamento).to.be("");
                    expect(data.respostaPergunta).to.be.a('boolean');
                    expect(data.respostaPergunta).to.be(false);
                    expect(data.descricaoTipoPerguntaPoliticaRelacionamento).to.be.a('string');
                    expect(data.descricaoTipoPerguntaPoliticaRelacionamento).to.be("");
                  }
                }
                {
                  let dataCtr = data.modelosProposta;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiversionmodelonegocioPOST', function() {
        it('should call apiversionmodelonegocioPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionmodelonegocioPOST call and complete the assertions
          /*
          var dadosModeloNegocio = new Apiseguradora.APISeguradoraImplementacaoServicoDadosModeloNegocio();
          dadosModeloNegocio.codigoModelo = "";
          dadosModeloNegocio.negociacaoId = 0;
          dadosModeloNegocio.cnpjParceiro = "0";
          dadosModeloNegocio.loginUsuario = "";
          dadosModeloNegocio.dadosModelo = new Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoModeloPropostaDTO();
          dadosModeloNegocio.dadosModelo.canalComercializacao = 0;
          dadosModeloNegocio.dadosModelo.codigoModelo = "";
          dadosModeloNegocio.dadosModelo.condicaoComercialId = 0;
          dadosModeloNegocio.dadosModelo.descricao = "";
          dadosModeloNegocio.dadosModelo.formaComercializacaoId = 0;
          dadosModeloNegocio.dadosModelo.negociacao = new Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoNegociacaoDTO();
          dadosModeloNegocio.dadosModelo.negociacao.cnpjParceiro = "0";
          dadosModeloNegocio.dadosModelo.negociacao.id = 0;
          dadosModeloNegocio.dadosModelo.negociacao.nome = "";
          dadosModeloNegocio.dadosModelo.negociacao.politicasRelacionamento = [new Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoPoliticaRelacionamentoaDTO()];
          dadosModeloNegocio.dadosModelo.negociacao.politicasRelacionamento[0].politicaId = 0;
          dadosModeloNegocio.dadosModelo.negociacao.politicasRelacionamento[0].resposta = false;
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados = [new Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoProdutoNegociaoDTO()];
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].coberturasNegociadas = [new Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoCoberturaNegociadaDTO()];
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].coberturasNegociadas[0].id = 0;
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].coberturasNegociadas[0].itemProdutoId = 0;
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].coberturasNegociadas[0].nomeFantasia = "";
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].formasCobranca = [0];
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].id = 0;
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].nomeFantasia = "";
          dadosModeloNegocio.dadosModelo.negociacao.produtosNegociados[0].produtoId = 0;
          dadosModeloNegocio.dadosModelo.negociacao.teleUnderwritings = [new Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoTeleUnderwritingDTO()];
          dadosModeloNegocio.dadosModelo.negociacao.teleUnderwritings[0].capitalMaximo = 0.0;
          dadosModeloNegocio.dadosModelo.negociacao.teleUnderwritings[0].capitalMinimo = 0.0;
          dadosModeloNegocio.dadosModelo.negociacao.teleUnderwritings[0].fimVigencia = new Date();
          dadosModeloNegocio.dadosModelo.negociacao.teleUnderwritings[0].id = 0;
          dadosModeloNegocio.dadosModelo.negociacao.teleUnderwritings[0].inicioVigencia = new Date();
          dadosModeloNegocio.dadosModelo.possuiDps = false;
          dadosModeloNegocio.dadosModelo.produtosRestritos = [0];
          var version = "version_example";
          var authorization = "authorization_example";

          instance.apiversionmodelonegocioPOST(dadosModeloNegocio, version, authorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestAPISeguradoraImplementacaoESimProdutoCloneNegociacaoModeloPropostaDTO);
            expect(data.valor).to.be.a(Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoModeloPropostaDTO);
                  expect(data.valor.canalComercializacao).to.be.a('number');
              expect(data.valor.canalComercializacao).to.be(0);
              expect(data.valor.codigoModelo).to.be.a('string');
              expect(data.valor.codigoModelo).to.be("");
              expect(data.valor.condicaoComercialId).to.be.a('number');
              expect(data.valor.condicaoComercialId).to.be(0);
              expect(data.valor.descricao).to.be.a('string');
              expect(data.valor.descricao).to.be("");
              expect(data.valor.formaComercializacaoId).to.be.a('number');
              expect(data.valor.formaComercializacaoId).to.be(0);
              expect(data.valor.negociacao).to.be.a(Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoNegociacaoDTO);
                    expect(data.valor.negociacao.cnpjParceiro).to.be.a('number');
                expect(data.valor.negociacao.cnpjParceiro).to.be("0");
                expect(data.valor.negociacao.id).to.be.a('number');
                expect(data.valor.negociacao.id).to.be(0);
                expect(data.valor.negociacao.nome).to.be.a('string');
                expect(data.valor.negociacao.nome).to.be("");
                {
                  let dataCtr = data.valor.negociacao.politicasRelacionamento;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoPoliticaRelacionamentoaDTO);
                    expect(data.politicaId).to.be.a('number');
                    expect(data.politicaId).to.be(0);
                    expect(data.resposta).to.be.a('boolean');
                    expect(data.resposta).to.be(false);
                  }
                }
                {
                  let dataCtr = data.valor.negociacao.produtosNegociados;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoProdutoNegociaoDTO);
                    {
                      let dataCtr = data.coberturasNegociadas;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoCoberturaNegociadaDTO);
                        expect(data.id).to.be.a('number');
                        expect(data.id).to.be(0);
                        expect(data.itemProdutoId).to.be.a('number');
                        expect(data.itemProdutoId).to.be(0);
                        expect(data.nomeFantasia).to.be.a('string');
                        expect(data.nomeFantasia).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.formasCobranca;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.nomeFantasia).to.be.a('string');
                    expect(data.nomeFantasia).to.be("");
                    expect(data.produtoId).to.be.a('number');
                    expect(data.produtoId).to.be(0);
                  }
                }
                {
                  let dataCtr = data.valor.negociacao.teleUnderwritings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.APISeguradoraImplementacaoESimProdutoCloneNegociacaoTeleUnderwritingDTO);
                    expect(data.capitalMaximo).to.be.a('number');
                    expect(data.capitalMaximo).to.be(0.0);
                    expect(data.capitalMinimo).to.be.a('number');
                    expect(data.capitalMinimo).to.be(0.0);
                    expect(data.fimVigencia).to.be.a(Date);
                    expect(data.fimVigencia).to.be(new Date());
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.inicioVigencia).to.be.a(Date);
                    expect(data.inicioVigencia).to.be(new Date());
                  }
                }
              expect(data.valor.possuiDps).to.be.a('boolean');
              expect(data.valor.possuiDps).to.be(false);
              {
                let dataCtr = data.valor.produtosRestritos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
