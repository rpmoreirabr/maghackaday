/*
 * API.Seguradora
 * Serviços de Negócios expostos através de RESTful services, para integrações com parceiros e agilidade no desenvolvimento interno de softwares da companhia.
 *
 * OpenAPI spec version: v1
 * Contact: integracaosistemas@mongeralaegon.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apiseguradora);
  }
}(this, function(expect, Apiseguradora) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Apiseguradora.SimulacaoEmpresarialApi();
  });

  describe('(package)', function() {
    describe('SimulacaoEmpresarialApi', function() {
      describe('apiversionsimulacaoempresarialcnpjcnpjcodigoModeloPropostacodigoModeloPropostaPOST', function() {
        it('should call apiversionsimulacaoempresarialcnpjcnpjcodigoModeloPropostacodigoModeloPropostaPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionsimulacaoempresarialcnpjcnpjcodigoModeloPropostacodigoModeloPropostaPOST call and complete the assertions
          /*
          var proponente = new Apiseguradora.APISeguradoraContratoV1SimulacaoResultadoSimulacaoPropostaEmpresarial();
          proponente.simulacoes = [new Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoPropostaEmpresarial()];
          proponente.simulacoes[0].proponente = new Apiseguradora.APISeguradoraContratoV1SimulacaoEmpresaProponente();
          proponente.simulacoes[0].proponente.cnpj = "0";
          proponente.simulacoes[0].proponente.cnae = "0";
          proponente.simulacoes[0].capitalIndividual = 0.0;
          proponente.simulacoes[0].comissionamento = new Apiseguradora.APISeguradoraContratoV1SimulacaoComissionamento();
          proponente.simulacoes[0].comissionamento.numeroOpcao = 0;
          proponente.simulacoes[0].quantidadeVidas = 0;
          proponente.simulacoes[0].uf = "";
          proponente.simulacoes[0].modulos = [new Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoModulo()];
          proponente.simulacoes[0].modulos[0].modulo = "";
          proponente.simulacoes[0].modulos[0].coberturas = [new Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoCoberturaEmpresarialGlobal()];
          proponente.simulacoes[0].modulos[0].coberturas[0].coberturaOpcional = false;
          proponente.simulacoes[0].modulos[0].coberturas[0].possuiCapitalIndependente = false;
          proponente.simulacoes[0].modulos[0].coberturas[0].nome = "";
          proponente.simulacoes[0].modulos[0].coberturas[0].sigla = "";
          proponente.simulacoes[0].modulos[0].coberturas[0].itemProdutoId = 0;
          proponente.simulacoes[0].modulos[0].coberturas[0].tipoItemProduto = new Apiseguradora.APISeguradoraContratoV1SimulacaoTipoItemProduto();
          proponente.simulacoes[0].modulos[0].coberturas[0].tipoItemProduto.id = 0;
          proponente.simulacoes[0].modulos[0].coberturas[0].tipoItemProduto.descricao = "";
          proponente.simulacoes[0].modulos[0].coberturas[0].tipoRelacaoSegurado = "";
          proponente.simulacoes[0].modulos[0].coberturas[0].dependenteItemProdutoId = 0;
          proponente.simulacoes[0].modulos[0].coberturas[0].premio = 0.0;
          proponente.simulacoes[0].modulos[0].coberturas[0].premioBase = 0.0;
          proponente.simulacoes[0].modulos[0].coberturas[0].capital = 0.0;
          proponente.simulacoes[0].modulos[0].coberturas[0].capitalBase = 0.0;
          proponente.simulacoes[0].modulos[0].identificacao = 0;
          proponente.simulacoes[0].modulos[0].cargos = [new Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoCargo()];
          proponente.simulacoes[0].modulos[0].cargos[0].id = 0;
          proponente.simulacoes[0].modulos[0].cargos[0].sigla = "";
          proponente.simulacoes[0].modulos[0].cargos[0].descricao = "";
          proponente.simulacoes[0].modulos[0].cargos[0].codigoExterno = "";
          proponente.simulacoes[0].modulos[0].cargos[0].numeroContrato = 0;
          proponente.simulacoes[0].periodicidade = "Unica";
          var cnpj = "cnpj_example";
          var codigoModeloProposta = "codigoModeloProposta_example";
          var version = "version_example";
          var authorization = "authorization_example";

          instance.apiversionsimulacaoempresarialcnpjcnpjcodigoModeloPropostacodigoModeloPropostaPOST(proponente, cnpj, codigoModeloProposta, version, authorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestAPISeguradoraContratoV1SimulacaoResultadoSimulacaoPropostaEmpresarial);
            expect(data.valor).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoResultadoSimulacaoPropostaEmpresarial);
                  {
                let dataCtr = data.valor.simulacoes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoPropostaEmpresarial);
                  expect(data.proponente).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoEmpresaProponente);
                        expect(data.proponente.cnpj).to.be.a('number');
                    expect(data.proponente.cnpj).to.be("0");
                    expect(data.proponente.cnae).to.be.a('number');
                    expect(data.proponente.cnae).to.be("0");
                  expect(data.capitalIndividual).to.be.a('number');
                  expect(data.capitalIndividual).to.be(0.0);
                  expect(data.comissionamento).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoComissionamento);
                        expect(data.comissionamento.numeroOpcao).to.be.a('number');
                    expect(data.comissionamento.numeroOpcao).to.be(0);
                  expect(data.quantidadeVidas).to.be.a('number');
                  expect(data.quantidadeVidas).to.be(0);
                  expect(data.uf).to.be.a('string');
                  expect(data.uf).to.be("");
                  {
                    let dataCtr = data.modulos;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoModulo);
                      expect(data.modulo).to.be.a('string');
                      expect(data.modulo).to.be("");
                      {
                        let dataCtr = data.coberturas;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoCoberturaEmpresarialGlobal);
                          expect(data.coberturaOpcional).to.be.a('boolean');
                          expect(data.coberturaOpcional).to.be(false);
                          expect(data.possuiCapitalIndependente).to.be.a('boolean');
                          expect(data.possuiCapitalIndependente).to.be(false);
                          expect(data.nome).to.be.a('string');
                          expect(data.nome).to.be("");
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.itemProdutoId).to.be.a('number');
                          expect(data.itemProdutoId).to.be(0);
                          expect(data.tipoItemProduto).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoTipoItemProduto);
                                expect(data.tipoItemProduto.id).to.be.a('number');
                            expect(data.tipoItemProduto.id).to.be(0);
                            expect(data.tipoItemProduto.descricao).to.be.a('string');
                            expect(data.tipoItemProduto.descricao).to.be("");
                          expect(data.tipoRelacaoSegurado).to.be.a('string');
                          expect(data.tipoRelacaoSegurado).to.be("");
                          expect(data.dependenteItemProdutoId).to.be.a('number');
                          expect(data.dependenteItemProdutoId).to.be(0);
                          expect(data.premio).to.be.a('number');
                          expect(data.premio).to.be(0.0);
                          expect(data.premioBase).to.be.a('number');
                          expect(data.premioBase).to.be(0.0);
                          expect(data.capital).to.be.a('number');
                          expect(data.capital).to.be(0.0);
                          expect(data.capitalBase).to.be.a('number');
                          expect(data.capitalBase).to.be(0.0);
                        }
                      }
                      expect(data.identificacao).to.be.a('number');
                      expect(data.identificacao).to.be(0);
                      {
                        let dataCtr = data.cargos;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Apiseguradora.APISeguradoraContratoV1SimulacaoSimulacaoCargo);
                          expect(data.id).to.be.a('number');
                          expect(data.id).to.be(0);
                          expect(data.sigla).to.be.a('string');
                          expect(data.sigla).to.be("");
                          expect(data.descricao).to.be.a('string');
                          expect(data.descricao).to.be("");
                          expect(data.codigoExterno).to.be.a('string');
                          expect(data.codigoExterno).to.be("");
                          expect(data.numeroContrato).to.be.a('number');
                          expect(data.numeroContrato).to.be(0);
                        }
                      }
                    }
                  }
                  expect(data.periodicidade).to.be.a('string');
                  expect(data.periodicidade).to.be("Unica");
                }
              }
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
