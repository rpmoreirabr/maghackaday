/*
 * API.Seguradora
 * Serviços de Negócios expostos através de RESTful services, para integrações com parceiros e agilidade no desenvolvimento interno de softwares da companhia.
 *
 * OpenAPI spec version: v1
 * Contact: integracaosistemas@mongeralaegon.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Apiseguradora);
  }
}(this, function(expect, Apiseguradora) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Apiseguradora.ParceiroApi();
  });

  describe('(package)', function() {
    describe('ParceiroApi', function() {
      describe('apiversionparceiroPOST', function() {
        it('should call apiversionparceiroPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionparceiroPOST call and complete the assertions
          /*
          var dadosCadastroParceiro = new Apiseguradora.APISeguradoraContratoV1ParDadosCadastroParceiro();
          dadosCadastroParceiro.cnpj = "";
          dadosCadastroParceiro.razaoSocial = "";
          dadosCadastroParceiro.nomeFantasia = "";
          dadosCadastroParceiro.prioridadeAtendimentoBeneficio = false;
          dadosCadastroParceiro.tipoAtividadeEconomica = new Apiseguradora.APISeguradoraContratoV1ParTipoAtividadeEconomica();
          dadosCadastroParceiro.tipoAtividadeEconomica.id = "0";
          dadosCadastroParceiro.tipoAtividadeEconomica.descricao = "";
          dadosCadastroParceiro.tipos = [new Apiseguradora.APISeguradoraContratoV1ParTipoParceiro()];
          dadosCadastroParceiro.tipos[0].id = "0";
          dadosCadastroParceiro.tipos[0].descricao = "";
          dadosCadastroParceiro.corPrimaria = "";
          dadosCadastroParceiro.corSecundaria = "";
          dadosCadastroParceiro.logoPositivo = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosCadastroParceiro.logoPositivo.nome = "";
          dadosCadastroParceiro.logoPositivo.base64 = "";
          dadosCadastroParceiro.logoPositivo.url = "";
          dadosCadastroParceiro.logoNegativo = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosCadastroParceiro.logoNegativo.nome = "";
          dadosCadastroParceiro.logoNegativo.base64 = "";
          dadosCadastroParceiro.logoNegativo.url = "";
          dadosCadastroParceiro.imagemTopo = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosCadastroParceiro.imagemTopo.nome = "";
          dadosCadastroParceiro.imagemTopo.base64 = "";
          dadosCadastroParceiro.imagemTopo.url = "";
          dadosCadastroParceiro.imagemServico = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosCadastroParceiro.imagemServico.nome = "";
          dadosCadastroParceiro.imagemServico.base64 = "";
          dadosCadastroParceiro.imagemServico.url = "";
          var version = "version_example";
          var authorization = "authorization_example";

          instance.apiversionparceiroPOST(dadosCadastroParceiro, version, authorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestSystemInt64);
            expect(data.valor).to.be.a('number');
            expect(data.valor).to.be("0");
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiversionparceiroPUT', function() {
        it('should call apiversionparceiroPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionparceiroPUT call and complete the assertions
          /*
          var dadosEdicaoParceiro = new Apiseguradora.APISeguradoraContratoV1ParDadosCadastroParceiro();
          dadosEdicaoParceiro.cnpj = "";
          dadosEdicaoParceiro.razaoSocial = "";
          dadosEdicaoParceiro.nomeFantasia = "";
          dadosEdicaoParceiro.prioridadeAtendimentoBeneficio = false;
          dadosEdicaoParceiro.tipoAtividadeEconomica = new Apiseguradora.APISeguradoraContratoV1ParTipoAtividadeEconomica();
          dadosEdicaoParceiro.tipoAtividadeEconomica.id = "0";
          dadosEdicaoParceiro.tipoAtividadeEconomica.descricao = "";
          dadosEdicaoParceiro.tipos = [new Apiseguradora.APISeguradoraContratoV1ParTipoParceiro()];
          dadosEdicaoParceiro.tipos[0].id = "0";
          dadosEdicaoParceiro.tipos[0].descricao = "";
          dadosEdicaoParceiro.corPrimaria = "";
          dadosEdicaoParceiro.corSecundaria = "";
          dadosEdicaoParceiro.logoPositivo = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosEdicaoParceiro.logoPositivo.nome = "";
          dadosEdicaoParceiro.logoPositivo.base64 = "";
          dadosEdicaoParceiro.logoPositivo.url = "";
          dadosEdicaoParceiro.logoNegativo = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosEdicaoParceiro.logoNegativo.nome = "";
          dadosEdicaoParceiro.logoNegativo.base64 = "";
          dadosEdicaoParceiro.logoNegativo.url = "";
          dadosEdicaoParceiro.imagemTopo = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosEdicaoParceiro.imagemTopo.nome = "";
          dadosEdicaoParceiro.imagemTopo.base64 = "";
          dadosEdicaoParceiro.imagemTopo.url = "";
          dadosEdicaoParceiro.imagemServico = new Apiseguradora.APISeguradoraContratoV1ParImagemParceiro();
          dadosEdicaoParceiro.imagemServico.nome = "";
          dadosEdicaoParceiro.imagemServico.base64 = "";
          dadosEdicaoParceiro.imagemServico.url = "";
          var version = "version_example";
          var authorization = "authorization_example";

          instance.apiversionparceiroPUT(dadosEdicaoParceiro, version, authorization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestSystemBoolean);
            expect(data.valor).to.be.a('boolean');
            expect(data.valor).to.be(false);
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiversionparceirocnpjcnpjGET', function() {
        it('should call apiversionparceirocnpjcnpjGET successfully', function(done) {
          // TODO: uncomment, update parameter values for apiversionparceirocnpjcnpjGET call and complete the assertions
          /*
          var version = "version_example";
          var authorization = "authorization_example";
          var opts = {};
          opts.cnpj = "cnpj_example";

          instance.apiversionparceirocnpjcnpjGET(version, authorization, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Apiseguradora.APISeguradoraHelperResultadoDaOperacaoRestSystemCollectionsGenericListMongeralESBPessoaContratoV1DadosParceiro);
            {
              let dataCtr = data.valor;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Apiseguradora.MongeralESBPessoaContratoV1DadosParceiro);
                expect(data.pessoaId).to.be.a('number');
                expect(data.pessoaId).to.be(0);
                expect(data.tipoPessoaId).to.be.a('number');
                expect(data.tipoPessoaId).to.be(0);
                expect(data.nome).to.be.a('string');
                expect(data.nome).to.be("");
                expect(data.observacao).to.be.a('string');
                expect(data.observacao).to.be("");
                expect(data.inscricaoMunicipal).to.be.a('string');
                expect(data.inscricaoMunicipal).to.be("");
                expect(data.possuiAuditoria).to.be.a('boolean');
                expect(data.possuiAuditoria).to.be(false);
                expect(data.naturezaJuridicaId).to.be.a('number');
                expect(data.naturezaJuridicaId).to.be(0);
                expect(data.razaoSocial).to.be.a('string');
                expect(data.razaoSocial).to.be("");
                expect(data.cnpj).to.be.a('number');
                expect(data.cnpj).to.be(0.0);
                expect(data.inscricaoEstadual).to.be.a('number');
                expect(data.inscricaoEstadual).to.be(0.0);
                expect(data.atividadeEconomicaPrincipal).to.be.a('string');
                expect(data.atividadeEconomicaPrincipal).to.be("");
                expect(data.dataAbertura).to.be.a(Date);
                expect(data.dataAbertura).to.be(new Date());
                expect(data.dataEncerramento).to.be.a(Date);
                expect(data.dataEncerramento).to.be(new Date());
                expect(data.desobrigadaCnpj).to.be.a('number');
                expect(data.desobrigadaCnpj).to.be(0);
                expect(data.cei).to.be.a('number');
                expect(data.cei).to.be("0");
                expect(data.inscricaIss).to.be.a('number');
                expect(data.inscricaIss).to.be("0");
                expect(data.tipoRamoAtividadeId).to.be.a('number');
                expect(data.tipoRamoAtividadeId).to.be(0);
                expect(data.regimeTributarioDiferenciado).to.be.a('boolean');
                expect(data.regimeTributarioDiferenciado).to.be(false);
                expect(data.tipoAtividadeEconomicaId).to.be.a('number');
                expect(data.tipoAtividadeEconomicaId).to.be(0);
                expect(data.tipoAtividadeEconomica).to.be.a('string');
                expect(data.tipoAtividadeEconomica).to.be("");
                expect(data.atividadeEconomicaSecundaria).to.be.a('string');
                expect(data.atividadeEconomicaSecundaria).to.be("");
                expect(data.faturamentoUltimoExercicio).to.be.a('number');
                expect(data.faturamentoUltimoExercicio).to.be(0.0);
                expect(data.resultadoUltimoExercicio).to.be.a('number');
                expect(data.resultadoUltimoExercicio).to.be(0.0);
                expect(data.anoUltimoExercicio).to.be.a('number');
                expect(data.anoUltimoExercicio).to.be(0);
                expect(data.responsavelCeiPessoaId).to.be.a('number');
                expect(data.responsavelCeiPessoaId).to.be(0);
                {
                  let dataCtr = data.tiposParceiro;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Apiseguradora.MongeralESBPessoaContratoV1DadosTipoParceiro);
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.descricao).to.be.a('string');
                    expect(data.descricao).to.be("");
                  }
                }
                expect(data.corPrimaria).to.be.a('string');
                expect(data.corPrimaria).to.be("");
                expect(data.corSecundaria).to.be.a('string');
                expect(data.corSecundaria).to.be("");
                expect(data.urlLogoPositivo).to.be.a('string');
                expect(data.urlLogoPositivo).to.be("");
                expect(data.urlLogoNegativo).to.be.a('string');
                expect(data.urlLogoNegativo).to.be("");
                expect(data.urlImagemTopo).to.be.a('string');
                expect(data.urlImagemTopo).to.be("");
                expect(data.urlImagemServico).to.be.a('string');
                expect(data.urlImagemServico).to.be("");
              }
            }
            {
              let dataCtr = data.mensagens;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.houveErrosDuranteProcessamento).to.be.a('boolean');
            expect(data.houveErrosDuranteProcessamento).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
